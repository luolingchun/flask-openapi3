[project]
name = "flask-openapi3"
description = "Generate REST API and OpenAPI documentation for your Flask project."
readme = "README.md"
license = { text = "MIT" }
maintainers = [{ name = "llc", email = "luolingchun@outlook.com" }]
classifiers = [
    # "Development Status :: 1 - Planning",
    # "Development Status :: 2 - Pre-Alpha",
    # "Development Status :: 3 - Alpha",
    # "Development Status :: 4 - Beta",
    "Development Status :: 5 - Production/Stable",
    # "Development Status :: 6 - Mature",
    # "Development Status :: 7 - Inactive",
    "Environment :: Web Environment",
    "Framework :: Flask",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.9"
dependencies = ["Flask>=2.0", "pydantic>=2.4"]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/luolingchun/flask-openapi3"
Documentation = "https://luolingchun.github.io/flask-openapi3"

[project.optional-dependencies]
yaml = ["pyyaml"]
async = ["asgiref >= 3.2"]
dotenv = ["python-dotenv"]
email = ["email-validator"]
# ui templates
swagger = ["flask-openapi3-swagger"]
redoc = ["flask-openapi3-redoc"]
rapidoc = ["flask-openapi3-rapidoc"]
rapipdf = ["flask-openapi3-rapipdf"]
scalar = ["flask-openapi3-scalar"]
elements = ["flask-openapi3-elements"]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "flask_openapi3/__version__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/flask_openapi3",
    "/examples",
    "/requirements",
    "/tests",
    "/CHANGELOG.md",
    "/CONTRIBUTING.md",
    "/LICENSE.rst"
]

[tool.ruff]
line-length = 160
exclude = ["migrations"]

[tool.ruff.lint]
select = ["E", "F", "T", "I001"]
extend-ignore = ["E203"]

[tool.ruff.lint.isort]
known-first-party = ["xs2event_common", "test"]
combine-as-imports = true
force-sort-within-sections = true
lines-after-imports = 2
order-by-type = false

[tool.ruff.lint.extend-per-file-ignores]
"wsgi.py" = ["E402"]
"run.py" = ["E402"]
"version.py" = ["T201"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
