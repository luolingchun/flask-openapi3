{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> Generate REST API and OpenAPI documentation for your Flask project. </p> <p> </p> <p>Flask OpenAPI3 is a web API framework based on Flask. It uses Pydantic to verify data and automatic generation of interaction documentation.</p> <p>The key features are:</p> <ul> <li> <p>Easy to code: Easy to use and easy to learn</p> </li> <li> <p>Standard document specification: Based on OpenAPI Specification</p> </li> <li> <p>Interactive OpenAPI documentation: Swagger, Redoc, RapiDoc, RapiPdf, Scalar, Elements</p> </li> <li> <p>Data validation: Fast data verification based on Pydantic</p> </li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>Python 3.9+</p> <p>flask-openapi3 is dependent on the following libraries:</p> <ul> <li>Flask for the web app.</li> <li>Pydantic for the data validation.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install -U flask-openapi3[swagger]\n</code></pre> <p>or</p> <pre><code>conda install -c conda-forge flask-openapi3[swagger]\n</code></pre> Optional dependencies <ul> <li>python-email-validator supports email verification.</li> <li>python-dotenv enables support   for Environment Variables From dotenv when running <code>flask</code>   commands.</li> <li>pyyaml is used to output the OpenAPI document in yaml format.</li> <li>asgiref allows views to be defined with <code>async def</code> and use <code>await</code>.</li> <li>flask-openapi3-plugins Provide OpenAPI UI for flask-openapi3.</li> </ul> <p>To install these dependencies with flask-openapi3:</p> <pre><code>pip install flask-openapi3[yaml]\n# or\npip install flask-openapi3[async]\n# or\npip install flask-openapi3[dotenv]\n# or\npip install flask-openapi3[email]\n# or all\npip install flask-openapi3[yaml,async,dotenv,email]\n# or manually\npip install pyyaml asgiref python-dotenv email-validator\n# OpenAPI UI plugins\npip install -U flask-openapi3[swagger,redoc,rapidoc,rapipdf,scalar,elements]\n</code></pre>"},{"location":"#a-simple-example","title":"A Simple Example","text":"<p>Here's a simple example, further go to the Example.</p> <pre><code>from pydantic import BaseModel\n\nfrom flask_openapi3 import Info, Tag\nfrom flask_openapi3 import OpenAPI\n\ninfo = Info(title=\"book API\", version=\"1.0.0\")\napp = OpenAPI(__name__, info=info)\n\nbook_tag = Tag(name=\"book\", description=\"Some Book\")\n\n\nclass BookQuery(BaseModel):\n    age: int\n    author: str\n\n\n@app.get(\"/book\", summary=\"get books\", tags=[book_tag])\ndef get_book(query: BookQuery):\n    \"\"\"\n    to get all books\n    \"\"\"\n    return {\n        \"code\": 0,\n        \"message\": \"ok\",\n        \"data\": [\n            {\"bid\": 1, \"age\": query.age, \"author\": query.author},\n            {\"bid\": 2, \"age\": query.age, \"author\": query.author}\n        ]\n    }\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre> Class-based API View Example <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel, Field\n\nfrom flask_openapi3 import OpenAPI, Tag, Info, APIView\n\n\ninfo = Info(title='book API', version='1.0.0')\napp = OpenAPI(__name__, info=info)\n\napi_view = APIView(url_prefix=\"/api/v1\", view_tags=[Tag(name=\"book\")])\n\n\nclass BookPath(BaseModel):\n    id: int = Field(..., description=\"book ID\")\n\n\nclass BookQuery(BaseModel):\n    age: Optional[int] = Field(None, description='Age')\n\n\nclass BookBody(BaseModel):\n    age: Optional[int] = Field(..., ge=2, le=4, description='Age')\n    author: str = Field(None, min_length=2, max_length=4, description='Author')\n\n\n@api_view.route(\"/book\")\nclass BookListAPIView:\n    a = 1\n\n    @api_view.doc(summary=\"get book list\")\n    def get(self, query: BookQuery):\n        print(self.a)\n        return query.model_dump_json()\n\n    @api_view.doc(summary=\"create book\")\n    def post(self, body: BookBody):\n        \"\"\"description for a created book\"\"\"\n        return body.model_dump_json()\n\n\n@api_view.route(\"/book/&lt;id&gt;\")\nclass BookAPIView:\n    @api_view.doc(summary=\"get book\")\n    def get(self, path: BookPath):\n        print(path)\n        return \"get\"\n\n    @api_view.doc(summary=\"update book\")\n    def put(self, path: BookPath):\n        print(path)\n        return \"put\"\n\n    @api_view.doc(summary=\"delete book\", deprecated=True)\n    def delete(self, path: BookPath):\n        print(path)\n        return \"delete\"\n\n\napp.register_api_view(api_view)\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre>"},{"location":"#api-document","title":"API Document","text":"<p>Run the simple example, and go to http://127.0.0.1:5000/openapi.</p> <p>OpenAPI UI plugins are optional dependencies that require manual installation.</p> <p><code>pip install -U flask-openapi3[swagger,redoc,rapidoc,rapipdf,scalar,elements]</code></p> <p>More optional ui templates goto the document about UI_Templates.</p> <p></p>"},{"location":"Changelog/","title":"Changelog","text":""},{"location":"Changelog/#v420-2025-06-21","title":"v4.2.0 2025-06-21","text":"<ul> <li>fix(models): enable 'populate_by_name' to alias fields correctly by @omikader in #221</li> <li>operation_id_callback with blueprint name and func name by @luolingchun in #224</li> <li>Delay throwing validation error by @luolingchun in #223</li> </ul>"},{"location":"Changelog/#v410-2025-02-08","title":"v4.1.0 2025-02-08","text":"<ul> <li>Support for Python 3.13 by @luolingchun in #200</li> <li>Fix query, form, header model extra not honored by @luolingchun in #201</li> <li>Better APISpec init to allow to modify it before generating spec_json. by @ddorian in #195</li> <li>Schema.maximum type float -&gt; int | float by @ddorian in #217</li> <li>Allow url_prefix to be set during API/APIView registration by @luolingchun in #215</li> <li>Drop support for Python 3.8 by @luolingchun in #199</li> </ul>"},{"location":"Changelog/#v403-2024-11-23","title":"v4.0.3 2024-11-23","text":"<ul> <li>Add PrefixItems to Schema Model for use with Tuple types by @JesseDeLoore in #197</li> </ul>"},{"location":"Changelog/#v402-2024-11-10","title":"v4.0.2 2024-11-10","text":"<ul> <li>Reuse schema[\"title\"] if it's defined by @ddorian in #186</li> <li>Simple webhook schema by @ddorian in #191</li> <li>Fix missing Field.default when it's value is None in openapi spec by @ddorian in #189</li> <li>ServerVariable.enum should be optional by @luolingchun in #194</li> </ul>"},{"location":"Changelog/#v401-2024-10-05","title":"v4.0.1 2024-10-05","text":"<ul> <li>Fix alias in query and form by @luolingchun in #184</li> </ul>"},{"location":"Changelog/#v400-2024-09-29","title":"v4.0.0 2024-09-29","text":"<ul> <li>Support plugins for ui templates by @luolingchun in #151</li> <li>Add py.typed marker file for PEP-561 support by @luolingchun in #160</li> <li>Use ruff instead of flake8 by @luolingchun in #164</li> <li>Remove experimental export markdown by @luolingchun in #161</li> <li>Fix <code>populate_by_name</code> when execute <code>model_validate</code> by @luolingchun in #167</li> <li>Update docs by @luolingchun in #155</li> <li>Fix get_pydantic_core_schema by @luolingchun in #179</li> <li>Fix list with default value by @luolingchun in #180</li> </ul>"},{"location":"Changelog/#v400rc3-2024-08-31","title":"v4.0.0rc3 2024-08-31","text":"<ul> <li>Add py.typed marker file for PEP-561 support by @luolingchun in #160</li> <li>Use ruff instead of flake8 by @luolingchun in #164</li> <li>Remove experimental export markdown by @luolingchun in #161</li> <li>Fix <code>populate_by_name</code> when execute <code>model_validate</code> by @luolingchun in #167</li> <li>Optimize performance and unit testing by @luolingchun in #155</li> </ul>"},{"location":"Changelog/#v400rc2-2024-06-16","title":"v4.0.0rc2 2024-06-16","text":"<ul> <li>Fix empty list in body by @luolingchun in #154</li> </ul>"},{"location":"Changelog/#v400rc1-2024-06-02","title":"v4.0.0rc1 2024-06-02","text":"<ul> <li>Support plugins for ui templates</li> <li>Support for OPENAPI_HTML_STRING in app.config</li> </ul>"},{"location":"Changelog/#v313-2024-06-16","title":"v3.1.3 2024-06-16","text":"<ul> <li>Fix empty list in body by @luolingchun in #154</li> </ul>"},{"location":"Changelog/#v312-2024-06-02","title":"v3.1.2 2024-06-02","text":"<ul> <li>Support SWAGGER_CONFIG and OAUTH_CONFIG in app.config by @luolingchun in #153</li> </ul> <p>DeprecationWarning</p> <ul> <li>The <code>api_doc_url</code> is deprecated in v4.x, use <code>doc_url</code> instead.</li> <li>The <code>swagger_url</code> is deprecated in v4.x.</li> <li>The <code>redoc_url</code> is deprecated in v4.x.</li> <li>The <code>rapidoc_url</code> is deprecated in v4.x.</li> <li>The <code>oauth_config</code> is deprecated in v4.x, use <code>app.config['OAUTH_CONFIG']</code> instead.</li> <li>The <code>doc_expansion</code> is deprecated in v4.x, use <code>app.config['SWAGGER_CONFIG']</code> instead.</li> <li>The <code>swagger_config</code> is deprecated in v4.x, use <code>app.config['SWAGGER_CONFIG']</code> instead.</li> <li>The <code>ui_templates</code> is deprecated in v4.x.</li> </ul>"},{"location":"Changelog/#v311-2024-04-21","title":"v3.1.1 2024-04-21","text":"<ul> <li>Wrong types of exclusiveMinimum &amp; exclusiveMaximum fields in Schema class by @Lavertis in #149</li> </ul>"},{"location":"Changelog/#v310-2024-03-24","title":"v3.1.0 2024-03-24","text":"<ul> <li>Add the swagger_config parameter to configure the swagger ui by @luolingchun in #146</li> <li>Use full links in Swagger and RapiDoc</li> <li>Upgrade Redoc to 2.1.3</li> <li>Upgrade Swagger to 5.12.0</li> </ul> <p>DeprecationWarning</p> <ul> <li>The doc_expansion parameter is deprecated; use swagger_config instead.</li> </ul>"},{"location":"Changelog/#v302-2024-01-28","title":"v3.0.2 2024-01-28","text":"<ul> <li>Fix missing Pydantic Calculated Fields (#141). Thanks, @thebmw.</li> </ul>"},{"location":"Changelog/#v301-2023-11-26","title":"v3.0.1 2023-11-26","text":"<ul> <li>Fix the same operationId in APIBlueprint (#133). Thanks, @fluffybrain3.</li> <li>Make body required false (#130). Thanks, @styper.</li> <li>The default value defined in the form is invalid (#129). Thanks, @seekplum.</li> </ul>"},{"location":"Changelog/#v300-2023-10-22","title":"v3.0.0 2023-10-22","text":"<ul> <li>Upgrade pydantic to v2.</li> <li>Remove deprecated code.</li> <li>Drop support for Python 3.7.</li> <li>support for raw requests (#109).</li> <li>Upgrade Swagger UI v5.9.0.</li> <li>Upgrade Redoc v2.1.2</li> <li>Update RapiDoc 9.3.4.</li> <li>#105 Supports valid properties only. Thanks, @ota42y.</li> <li>#106 Bugfix for parameter object. Thanks, @ota42y.</li> <li>#107 Bugfix for generics class. Thanks, @ota42y.</li> <li>#114 Support Flask 3.0.</li> <li>#118 Fix missed components schemas in ValidationErrorModel. Thanks, @SeFeX.</li> <li>#122 Skip 422 response non parameters. Thanks, @Danielsn1.</li> </ul>"},{"location":"Changelog/#v300rc2-2023-10-03","title":"v3.0.0rc2 2023-10-03","text":"<ul> <li>#105 Supports valid properties only. Thanks, @ota42y.</li> <li>#106 Bugfix for parameter object. Thanks, @ota42y.</li> <li>#107 Bugfix for generics class. Thanks, @ota42y.</li> <li>#114 Support Flask 3.0.</li> </ul>"},{"location":"Changelog/#v300rc1-2023-09-03","title":"v3.0.0rc1 2023-09-03","text":"<ul> <li>Upgrade pydantic to v2</li> <li>Remove deprecated code</li> <li>Drop support for Python 3.7</li> </ul>"},{"location":"Changelog/#v255-2023-11-26","title":"v2.5.5 2023-11-26","text":"<ul> <li>Fix the same operationId in APIBlueprint (#133). Thanks, @fluffybrain3.</li> <li>Make body required false (#130). Thanks, @styper.</li> <li>The default value defined in the form is invalid (#129). Thanks, @seekplum.</li> </ul>"},{"location":"Changelog/#v254-2023-10-22","title":"v2.5.4 2023-10-22","text":"<ul> <li>#118 Fix missed components schemas in ValidationErrorModel. Thanks, @SeFeX.</li> <li>#122 Skip 422 response non parameters. Thanks, @Danielsn1.</li> </ul>"},{"location":"Changelog/#v253-2023-10-03","title":"v2.5.3 2023-10-03","text":"<ul> <li>#105 Supports valid properties only. Thanks, @ota42y.</li> <li>#106 Bugfix for parameter object. Thanks, @ota42y.</li> <li>#107 Bugfix for generics class. Thanks, @ota42y.</li> </ul>"},{"location":"Changelog/#v252-2023-08-13","title":"v2.5.2 2023-08-13","text":"<ul> <li>#97 Fix response miss description. Thanks, @tekrei.</li> </ul>"},{"location":"Changelog/#v251-2023-08-07","title":"v2.5.1 2023-08-07","text":"<ul> <li>#95 Added ability to deserialize complex form parameter objects. Thanks, @BlackGad.</li> </ul>"},{"location":"Changelog/#v250-2023-08-02","title":"v2.5.0 2023-08-02","text":"<ul> <li>#79 Support <code>by_alias</code> in Model Config. Thanks, @candleindark.</li> <li>#82 Fix parameter in url_prefix. Thanks, @riedgar-ms.</li> <li>#83 Be able to change 422 validation errors to other http response status. Thanks, @CostcoFanboy.</li> <li>#86 Responses key supports both string, int, and HTTPStatus. Thanks, @CostcoFanboy.</li> </ul>"},{"location":"Changelog/#v240-2023-06-04","title":"v2.4.0 2023-06-04","text":"<ul> <li>#72 security_schemes(SecurityScheme) supports a json format.</li> <li>#68 feat: Add operation_id_callback. Thanks, @BoyanYK.</li> <li>#64 Explains the usage of flask openapi command more clearly. Thanks, @candleindark.</li> <li>#75 Init view_class and pass view_kwargs. Thanks, @stufisher.</li> <li>#70 Support for Specification Extensions in OpenAPI Object and Operation Object. Thanks, @simonblund.</li> <li>#73 BaseModel Config support openapi_extra.</li> <li>Merge <code>extra_responses</code> to <code>responses</code> and deprecate <code>extra_responses</code>.</li> </ul> <p>DeprecationWarning:</p> <ul> <li>Add DeprecationWarning to <code>APIKey</code>, <code>HTTPBase</code>, <code>OAuth2</code>, <code>OpenIdConnect</code>, <code>HTTPBearer</code> that will be deprecated in v3.0.</li> <li>Add DeprecationWarning to <code>extra_form</code>, <code>extra_body</code> and <code>extra_responses</code> that will be deprecated in v3.0.</li> </ul>"},{"location":"Changelog/#v232-2023-04-03","title":"v2.3.2 2023-04-03","text":"<ul> <li>#61 Fix headers with pydantic alias</li> </ul>"},{"location":"Changelog/#v231-2023-02-13","title":"v2.3.1 2023-02-13","text":"<ul> <li>remove * in install_requires for setuptools 67+</li> </ul>"},{"location":"Changelog/#v230-2023-02-12","title":"v2.3.0 2023-02-12","text":"<ul> <li>Support for custom UI templates (#55)</li> <li>endpoint index rename to openapi</li> <li>fix missing enum in component schemas</li> </ul>"},{"location":"Changelog/#v222-2023-01-01","title":"v2.2.2 2023-01-01","text":"<ul> <li>Fix async</li> <li>Fix duplicate tags</li> </ul>"},{"location":"Changelog/#v221-2022-11-23","title":"v2.2.1 2022-11-23","text":"<ul> <li>Add dependent files</li> </ul>"},{"location":"Changelog/#v220-2022-11-14","title":"v2.2.0 2022-11-14","text":"<ul> <li>support APIView</li> <li>Add mypy</li> <li>Support for python 3.11</li> <li>Upgrade Swagger UI 4.15.5</li> <li>Upgrade Redoc UI 2.0.0</li> </ul>"},{"location":"Changelog/#v211-2022-10-12","title":"v2.1.1 2022-10-12","text":"<ul> <li>#41 Set the <code>requestBody required</code> default value to True. Thanks, @Colin-b</li> <li>Fix multi decorator for api</li> <li>#42 Fix required header is not found when <code>_</code> in header field. Thanks, @elirud</li> </ul>"},{"location":"Changelog/#v210-2022-09-04","title":"v2.1.0 2022-09-04","text":"<ul> <li>#36 Add extra_form for operation. Thanks, @Colin-b</li> <li>#36 Add extra_body for operation. Thanks, @Colin-b</li> <li>Add external_docs for operation</li> <li>Add servers for operation</li> <li>Support to parse extra field in parameters</li> <li>#35 Fixed extra_responses can now be used to set every field in Response. Thanks, @Colin-b</li> <li>Upgrade Swagger UI 4.14.0</li> <li>Upgrade Redoc UI 2.0.0-rc.76</li> <li>Upgrade RapiDoc UI 9.3.3</li> </ul>"},{"location":"Changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>#39 Remove configuration FLASK_OPENAPI_VALIDATE_RESPONSE</li> </ul>"},{"location":"Changelog/#v201-2022-08-07","title":"v2.0.1 2022-08-07","text":"<ul> <li>#32 Fix: parse_rule is deprecated in werkzeug&gt;=2.2.0.</li> </ul>"},{"location":"Changelog/#v200-2022-06-26","title":"v2.0.0 2022-06-26","text":"<ul> <li>#26 Fixed: Body throws exception when receiving str instead of dict. Thanks, @nor3th</li> <li>#23 Fixed externalDocs support. Thanks, @dvaerum</li> <li>#28 Fixed to enable <code>__root__</code> property when validation responses. Thanks, @dvaerum</li> <li>#17 Support for Nested APIBlueprint enhancement. Thanks, @dvaerum</li> <li>#29 Support disable warnings. Thanks, @dvaerum</li> <li>Support for empty response body. Thanks, @dvaerum</li> <li>Support reload authorizations in Swagger UI</li> <li>Add <code>flask openapi</code> command</li> <li>Add options in view functions</li> <li>Upgrade flask to v2.x</li> </ul>"},{"location":"Changelog/#breaking-changes_1","title":"Breaking Changes","text":"<ul> <li>Remove export markdown to <code>flask openapi</code> command</li> <li>Configuration <code>VALIDATE_RESPONSE</code> rename to <code>FLASK_OPENAPI_VALIDATE_RESPONSE</code></li> </ul>"},{"location":"Changelog/#v114-2022-05-05","title":"v1.1.4 2022-05-05","text":"<ul> <li>fix: Trailing slash in APIBlueprint</li> </ul>"},{"location":"Changelog/#v113-2022-05-01","title":"v1.1.3 2022-05-01","text":"<ul> <li>fix: Find globalns for the unwrapped func</li> <li>#19 fix: Trailing slash in APIBlueprint. Thanks, @ev-agelos</li> <li>add description for UnprocessableEntity</li> <li>remove printouts in <code>__init__.py</code></li> </ul>"},{"location":"Changelog/#v112-2022-04-01","title":"v1.1.2 2022-04-01","text":"<ul> <li>#16 Fix fileStorage list is not supported. Thanks, @tekrei</li> </ul>"},{"location":"Changelog/#v110-2022-03-13","title":"v1.1.0 2022-03-13","text":"<ul> <li>#13 drop support for flask 1.0.x. Thanks, @danmur</li> <li>#15 Fix to enable BaseModel with <code>__root__</code> property. Thanks, @tarcisiojr</li> <li>#14 Custom parameters: doc_prefix, api_doc_url, swagger_url, redoc_url, rapidoc_url. Thanks, @barryrobison</li> <li>Upgrade swagger UI v4.6.2</li> <li>Upgrade Redoc v2.0.0-rc.63</li> <li>Upgrade RapiDoc v9.2.0</li> </ul>"},{"location":"Changelog/#v101-2022-02-12","title":"v1.0.1 2022-02-12","text":"<ul> <li>add operation_id for OpenAPI Specification</li> </ul>"},{"location":"Changelog/#v100-2022-01-11","title":"v1.0.0 2022-01-11","text":"<ul> <li>#10 Fix: header's title case. Thanks, @rrr34</li> <li>#9 Support for extra responses. Thanks, @blynn99</li> <li>#12 Support for path operation field deprecated. Thanks, @blynn99</li> <li>Add keyword parameters <code>summary</code> and <code>description</code></li> <li>Add servers for OpenAPI</li> <li>Upgrade swagger UI v4.1.3</li> <li>Upgrade Redoc v2.0.0-rc.59</li> <li>Add rapidoc</li> </ul>"},{"location":"Changelog/#breaking-changes_2","title":"Breaking Changes","text":"<ul> <li>Renamed <code>securitySchemes</code> to <code>security_schemes</code></li> <li>Renamed <code>docExpansion</code> to <code>doc_expansion</code></li> </ul>"},{"location":"Changelog/#v099-2021-12-09","title":"v0.9.9 2021-12-09","text":"<ul> <li>fix: default value in a query and form model</li> <li>fix: empty form and body</li> <li>support <code>from __future__ import annotations</code></li> <li>drop python36</li> </ul>"},{"location":"Changelog/#v098-2021-11-12","title":"v0.9.8 2021-11-12","text":"<ul> <li>add Configuration <code>docExpansion</code></li> <li>query and form add array support</li> </ul>"},{"location":"Changelog/#v097-2021-08-19","title":"v0.9.7 2021-08-19","text":"<ul> <li>fix: path $ref</li> <li>fix: markdown enum</li> </ul>"},{"location":"Changelog/#v096-2021-08-18","title":"v0.9.6 2021-08-18","text":"<ul> <li>Export to markdown(Experimental)</li> </ul>"},{"location":"Changelog/#v095-2021-07-11","title":"v0.9.5 2021-07-11","text":"<ul> <li>remove <code>validate_resp</code> and add <code>VALIDATE_RESPONSE</code></li> </ul>"},{"location":"Changelog/#v094-2021-07-03","title":"v0.9.4 2021-07-03","text":"<ul> <li>OpenAPI add responses and APIBlueprint add abp_responses</li> <li>fix: validate response error when responses is empty dict</li> <li>#3 endpoint and APIBlueprint add <code>doc_ui</code>. Thanks, @DerManoMann</li> <li>#4 fix: response description. Thanks, @DerManoMann</li> <li>#5 add custom parameter <code>oauth_config</code>. Thanks, @DerManoMann</li> <li>#6 support validation Flask Response. Thanks, @DerManoMann</li> <li>#7 fix: response validation does not work when uses   http.HTTPStatus enums as status_code. Thanks, @DerManoMann</li> </ul>"},{"location":"Changelog/#v093-2021-06-08","title":"v0.9.3 2021-06-08","text":"<ul> <li>APIBlueprint adds abp_tags and abp_security</li> <li>fix: tags de-duplication</li> <li>fix: operation summary and description</li> </ul>"},{"location":"Changelog/#v092-2021-05-17","title":"v0.9.2 2021-05-17","text":"<ul> <li>fix: _do_decorator</li> <li>add doc_ui args. support close swagger UI and redoc</li> </ul>"},{"location":"Changelog/#v091-2021-05-16","title":"v0.9.1 2021-05-16","text":"<ul> <li>fix\uff1arequest data is None</li> <li>json--&gt;body</li> <li>set 422 Content-Type application/json</li> <li>raise response validate exception</li> <li>fix: TypeError: issubclass() arg 1 must be a class</li> </ul>"},{"location":"Changelog/#v090-2021-05-13","title":"v0.9.0 2021-05-13","text":"<ul> <li>first version</li> </ul>"},{"location":"Contributing/","title":"Contributing","text":""},{"location":"Contributing/#contributing-guide","title":"Contributing Guide","text":"<p>Thank you for contributing to Flask OpenAPI3.</p> <ol> <li>Create a new issue</li> <li>Fork and Create a pull request</li> </ol> <p>Before submitting pr, you need to complete the following steps:</p> <ol> <li> <p>Install requirements</p> <pre><code>pip install -U flask pydantic\n</code></pre> </li> <li> <p>Running the tests</p> <pre><code>set pythonpath=. \n# or export pythonpath=.\npytest tests\n</code></pre> </li> <li> <p>Running the ruff</p> <pre><code>ruff check flask_openapi3 tests examples\n</code></pre> </li> <li> <p>Running the mypy</p> <pre><code>mypy flask_openapi3\n</code></pre> </li> <li> <p>Building the docs</p> <p>Serve the live docs with Material for MkDocs, and make sure it's correct.</p> <pre><code>mkdocs serve\n</code></pre> </li> </ol>"},{"location":"Example/","title":"Example","text":""},{"location":"Example/#simple-demo","title":"Simple Demo","text":"<pre><code>from pydantic import BaseModel\n\nfrom flask_openapi3 import Info, Tag\nfrom flask_openapi3 import OpenAPI\n\ninfo = Info(title='book API', version='1.0.0')\napp = OpenAPI(__name__, info=info)\n\nbook_tag = Tag(name='book', description='Some Book')\n\n\nclass BookQuery(BaseModel):\n    age: int\n    author: str\n\n\n@app.get('/book', tags=[book_tag])\ndef get_book(query: BookQuery):\n    \"\"\"get books\n    to get all books\n    \"\"\"\n    return {\n        \"code\": 0,\n        \"message\": \"ok\",\n        \"data\": [\n            {\"bid\": 1, \"age\": query.age, \"author\": query.author},\n            {\"bid\": 2, \"age\": query.age, \"author\": query.author}\n        ]\n    }\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"Example/#rest-demo","title":"REST Demo","text":"<pre><code>from http import HTTPStatus\nfrom typing import Optional, List\n\nfrom pydantic import BaseModel, Field\n\nfrom flask_openapi3 import Info, Tag\nfrom flask_openapi3 import OpenAPI\n\n\ninfo = Info(title='book API', version='1.0.0')\n# Basic Authentication Sample\nbasic = {\n  \"type\": \"http\",\n  \"scheme\": \"basic\"\n}\n# JWT Bearer Sample\njwt = {\n  \"type\": \"http\",\n  \"scheme\": \"bearer\",\n  \"bearerFormat\": \"JWT\"\n}\n# API Key Sample\napi_key = {\n  \"type\": \"apiKey\",\n  \"name\": \"api_key\",\n  \"in\": \"header\"\n}\n# Implicit OAuth2 Sample\noauth2 = {\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\nsecurity_schemes = {\"jwt\": jwt, \"api_key\": api_key, \"oauth2\": oauth2, \"basic\": basic}\n\n\nclass NotFoundResponse(BaseModel):\n    code: int = Field(-1, description=\"Status Code\")\n    message: str = Field(\"Resource not found!\", description=\"Exception Information\")\n\n\napp = OpenAPI(__name__, info=info, security_schemes=security_schemes, responses={404: NotFoundResponse})\n\nbook_tag = Tag(name='book', description='Some Book')\nsecurity = [\n    {\"jwt\": []},\n    {\"oauth2\": [\"write:pets\", \"read:pets\"]}\n]\n\n\nclass BookPath(BaseModel):\n    bid: int = Field(..., description='book id')\n\n\nclass BookQuery(BaseModel):\n    age: Optional[int] = Field(None, description='Age')\n    s_list: List[str] = Field(None, alias='s_list[]', description='some array')\n\n\nclass BookBody(BaseModel):\n    age: Optional[int] = Field(..., ge=2, le=4, description='Age')\n    author: str = Field(None, min_length=2, max_length=4, description='Author')\n\n\nclass BookBodyWithID(BaseModel):\n    bid: int = Field(..., description='book id')\n    age: Optional[int] = Field(None, ge=2, le=4, description='Age')\n    author: str = Field(None, min_length=2, max_length=4, description='Author')\n\n\nclass BookResponse(BaseModel):\n    code: int = Field(0, description=\"Status Code\")\n    message: str = Field(\"ok\", description=\"Exception Information\")\n    data: Optional[BookBodyWithID]\n\n\n@app.get(\n    '/book/&lt;int:bid&gt;',\n    tags=[book_tag],\n    summary='new summary',\n    description='new description',\n    responses={200: BookResponse, 201: {\"content\": {\"text/csv\": {\"schema\": {\"type\": \"string\"}}}}},\n    security=security\n)\ndef get_book(path: BookPath):\n    \"\"\"Get a book\n    to get some book by id, like:\n    http://localhost:5000/book/3\n    \"\"\"\n    if path.bid == 4:\n        return NotFoundResponse().dict(), 404\n    return {\"code\": 0, \"message\": \"ok\", \"data\": {\"bid\": path.bid, \"age\": 3, \"author\": 'no'}}\n\n\n# set doc_ui False disable openapi UI\n@app.get('/book', doc_ui=True, deprecated=True)\ndef get_books(query: BookQuery):\n    \"\"\"get books\n    to get all books\n    \"\"\"\n    print(query)\n    return {\n        \"code\": 0,\n        \"message\": \"ok\",\n        \"data\": [\n            {\"bid\": 1, \"age\": query.age, \"author\": 'a1'},\n            {\"bid\": 2, \"age\": query.age, \"author\": 'a2'}\n        ]\n    }\n\n\n@app.post('/book', tags=[book_tag], responses={200: BookResponse})\ndef create_book(body: BookBody):\n    print(body)\n    return {\"code\": 0, \"message\": \"ok\"}, HTTPStatus.OK\n\n\n@app.put('/book/&lt;int:bid&gt;', tags=[book_tag])\ndef update_book(path: BookPath, body: BookBody):\n    print(path)\n    print(body)\n    return {\"code\": 0, \"message\": \"ok\"}\n\n\n@app.delete('/book/&lt;int:bid&gt;', tags=[book_tag], doc_ui=False)\ndef delete_book(path: BookPath):\n    print(path)\n    return {\"code\": 0, \"message\": \"ok\"}\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"Example/#apiblueprint","title":"APIBlueprint","text":"<pre><code>from typing import Optional\n\nfrom pydantic import BaseModel, Field\n\nfrom flask_openapi3 import APIBlueprint, OpenAPI\nfrom flask_openapi3 import Tag, Info\n\ninfo = Info(title='book API', version='1.0.0')\n\njwt = {\n    \"type\": \"http\",\n    \"scheme\": \"bearer\",\n    \"bearerFormat\": \"JWT\"\n}\nsecurity_schemes = {\"jwt\": jwt}\n\napp = OpenAPI(__name__, info=info, security_schemes=security_schemes)\n\ntag = Tag(name='book', description=\"Some Book\")\nsecurity = [{\"jwt\": []}]\n\n\nclass Unauthorized(BaseModel):\n    code: int = Field(-1, description=\"Status Code\")\n    message: str = Field(\"Unauthorized!\", description=\"Exception Information\")\n\n\napi = APIBlueprint(\n    '/book',\n    __name__,\n    url_prefix='/api',\n    abp_tags=[tag],\n    abp_security=security,\n    abp_responses={\"401\": Unauthorized},\n    # disable openapi UI\n    doc_ui=True\n)\n\n\nclass BookBody(BaseModel):\n    age: Optional[int] = Field(..., ge=2, le=4, description='Age')\n    author: str = Field(None, min_length=2, max_length=4, description='Author')\n\n\nclass Path(BaseModel):\n    bid: int = Field(..., description='book id')\n\n\n@api.get('/book', doc_ui=False)\ndef get_book():\n    return {\"code\": 0, \"message\": \"ok\"}\n\n\n@api.post('/book', responses={201: {\"content\": {\"text/csv\": {\"schema\": {\"type\": \"string\"}}}}})\ndef create_book(body: BookBody):\n    assert body.age == 3\n    return {\"code\": 0, \"message\": \"ok\"}\n\n\n@api.put('/book/&lt;int:bid&gt;')\ndef update_book(path: Path, body: BookBody):\n    assert path.bid == 1\n    assert body.age == 3\n    return {\"code\": 0, \"message\": \"ok\"}\n\n\n# register api\napp.register_api(api)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"Example/#upload-file-demo","title":"Upload File Demo","text":"<pre><code>from pydantic import BaseModel, Field\n\nfrom flask_openapi3 import OpenAPI, FileStorage\n\napp = OpenAPI(__name__)\n\n\nclass UploadFileForm(BaseModel):\n    file: FileStorage\n    file_type: str = Field(None, description=\"File Type\")\n\n\n@app.post('/upload')\ndef upload_file(form: UploadFileForm):\n    print(form.file.filename)\n    print(form.file_type)\n    form.file.save('test.jpg')\n    return {\"code\": 0, \"message\": \"ok\"}\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"Example/#a-complete-project","title":"A complete project","text":"<p>see flask-api-demo</p>"},{"location":"LICENSE/","title":"LICENSE","text":"<p>MIT License</p> <p>Copyright (c) 2021 llc</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"Quickstart/","title":"Quickstart","text":"<p><code>flask_openapi3</code> based on Flask and Pydantic, So you can use it like Flask.</p>"},{"location":"Quickstart/#a-minimal-application","title":"A Minimal Application","text":"<p>Just like Flask, Create <code>hello.py</code>:</p> <pre><code>from flask_openapi3 import OpenAPI\n\napp = OpenAPI(__name__)\n\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\n\nif __name__ == '__main__':\n    app.run()\n</code></pre> <p>And then run it:</p> <pre><code>python hello.py\n</code></pre> <p>You will see the output information:</p> <pre><code> * Serving Flask app 'just_flask' (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n</code></pre>"},{"location":"Quickstart/#rest-api","title":"REST API","text":"<p>You can use <code>get</code>, <code>post</code>, <code>put</code>, <code>patch</code>, <code>delete</code> REST API in <code>flask-openapi3</code>.</p> <pre><code>from flask_openapi3 import OpenAPI\n\napp = OpenAPI(__name__)\n\n\n@app.get('/book')\ndef get_books():\n    return [\"book1\", \"book2\"]\n\n\n@app.post('/book')\ndef create_book():\n    return {\"message\": \"success\"}\n\n\nif __name__ == '__main__':\n    app.run()\n</code></pre>"},{"location":"Quickstart/#apiblueprint","title":"APIBlueprint","text":"<p>APIBlueprint based on Flask Blueprint, you should use <code>register_api</code> instead of  <code>register_blueprint</code>.</p> <pre><code>from flask_openapi3 import OpenAPI\n\napp = OpenAPI(__name__)\n\napi = APIBlueprint('book', __name__, url_prefix='/api')\n\n\n@api.post('/book')\ndef create_book():\n    return {\"message\": \"success\"}\n\n\n# register api\napp.register_api(api)\n\nif __name__ == '__main__':\n    app.run()\n</code></pre>"},{"location":"Quickstart/#nested-apiblueprint","title":"Nested APIBlueprint","text":"<p>Allow an API Blueprint to be registered on another API Blueprint.</p> <p>For more information, please see Flask Nesting Blueprints.</p> <pre><code>from flask_openapi3 import OpenAPI, APIBlueprint\n\napp = OpenAPI(__name__)\n\napi = APIBlueprint('book', __name__, url_prefix='/api/book')\napi_english = APIBlueprint('english', __name__)\napi_chinese = APIBlueprint('chinese', __name__)\n\n\n@api_english.post('/english')\ndef create_english_book():\n    return {\"message\": \"english\"}\n\n\n@api_chinese.post('/chinese')\ndef create_chinese_book():\n    return {\"message\": \"chinese\"}\n\n\n# register nested api\napi.register_api(api_english)\napi.register_api(api_chinese)\n# register api\napp.register_api(api)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"Quickstart/#apiview","title":"APIView","text":"<p>Class-based API View, click here for the complete example:</p> <pre><code>@api_view.route(\"/book\")\nclass BookListAPIView:\n    a = 1\n\n    @api_view.doc(summary=\"get book list\")\n    def get(self, query: BookQuery):\n        print(self.a)\n        return query.json()\n\n    @api_view.doc(summary=\"create book\")\n    def post(self, body: BookBody):\n        \"\"\"description for a created book\"\"\"\n        return body.json()\n</code></pre> <p>You can define a parameter named <code>view_kwargs</code> (the only parameter of the <code>__init__</code> function), and using <code>view_kwargs.get</code> get the required keys for each.</p> <pre><code>@api_view.route(\"/book\")\nclass BookListAPIView:\n    def __init__(self, view_kwargs=None):\n        self.a = view_kwargs.get(\"a\")\n\n    def get(self):\n        ...\n\n    def post(self):\n        ...\n\n@api_view.route(\"/book/&lt;id&gt;\")\nclass BookAPIView:\n    def __init__(self, view_kwargs=None):\n        self.b = view_kwargs.get(\"b\")\n\n    def get(self):\n        ...\n\n    def put(self):\n        ...\n\n    def delete(self):\n        ...\n\napp.register_api_view(\n    api_view,\n    view_kwargs={\n        \"a\": 1,\n        \"b\": 2\n    }\n)\n</code></pre>"},{"location":"Quickstart/#async-api","title":"Async API","text":"<p>Just use <code>async</code> when defining functions. More information goes to Using async and await \u2014 Flask Documentation.</p> <p>Info</p> <p>You need to manually install <code>asgiref</code> using pip: <pre><code>pip install flask-openapi3[async]\n\n# or\npip install asgiref\n</code></pre></p> <pre><code>@app.post('/open/api')\nasync def post_openapi(body: Query):\n    print(body)\n    return 'POST, OpenAPI!'\n</code></pre>"},{"location":"Reference/APIBlueprint/","title":"APIBlueprint","text":""},{"location":"Reference/APIBlueprint/#flask_openapi3.APIBlueprint","title":"<code>APIBlueprint</code>","text":"<p>               Bases: <code>APIScaffold</code>, <code>Blueprint</code></p> Source code in <code>flask_openapi3/blueprint.py</code> <pre><code>class APIBlueprint(APIScaffold, Blueprint):\n    def __init__(\n            self,\n            name: str,\n            import_name: str,\n            *,\n            abp_tags: Optional[list[Tag]] = None,\n            abp_security: Optional[list[dict[str, list[str]]]] = None,\n            abp_responses: Optional[ResponseDict] = None,\n            doc_ui: bool = True,\n            operation_id_callback: Callable = get_operation_id_for_path,\n            **kwargs: Any\n    ) -&gt; None:\n        \"\"\"\n        Based on Flask Blueprint\n\n        Args:\n            name: The name of the blueprint. It Will be prepared to each endpoint name.\n            import_name: The name of the blueprint package, usually ``__name__``.\n                         This helps locate the ``root_path`` for the blueprint.\n            abp_tags: APIBlueprint tags for every API.\n            abp_security: APIBlueprint security for every API.\n            abp_responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n            doc_ui: Enable OpenAPI document UI (Swagger UI, Redoc, and Rapidoc). Defaults to True.\n            operation_id_callback: Callback function for custom operation_id generation.\n                                   Receives name (str), path (str) and method (str) parameters.\n                                   Defaults to `get_operation_id_for_path` from utils\n            **kwargs: Flask Blueprint kwargs\n        \"\"\"\n        super(APIBlueprint, self).__init__(name, import_name, **kwargs)\n\n        # Initialize instance variables\n        self.paths: dict = dict()\n        self.components_schemas: dict = dict()\n        self.tags: list[Tag] = []\n        self.tag_names: list[str] = []\n\n        # Set values from arguments or default values\n        self.abp_tags = abp_tags or []\n        self.abp_security = abp_security or []\n\n        # Convert key to string\n        self.abp_responses = convert_responses_key_to_string(abp_responses or {})\n\n        self.doc_ui = doc_ui\n\n        # Set the operation ID callback function\n        self.operation_id_callback: Callable = operation_id_callback\n\n    def register_api(self, api: \"APIBlueprint\") -&gt; None:\n        \"\"\"Register a nested APIBlueprint\"\"\"\n\n        # Check if the APIBlueprint is being registered on itself\n        if api is self:\n            raise ValueError(\"Cannot register a api blueprint on itself\")\n\n        # Merge tags from the nested APIBlueprint\n        for tag in api.tags:\n            if tag.name not in self.tag_names:\n                self.tags.append(tag)\n\n        # Merge paths from the nested APIBlueprint\n        for path_url, path_item in api.paths.items():\n            # Parse rule: merge url_prefix and format rule from /pet/&lt;petId&gt; to /pet/{petId}\n            uri = parse_rule(path_url, url_prefix=self.url_prefix)\n\n            self.paths[uri] = path_item\n\n        # Merge component schemas from the nested APIBlueprint\n        self.components_schemas.update(api.components_schemas)\n\n        # Register the nested APIBlueprint as a blueprint\n        self.register_blueprint(api)\n\n    def _add_url_rule(\n            self,\n            rule,\n            endpoint=None,\n            view_func=None,\n            provide_automatic_options=None,\n            **options,\n    ) -&gt; None:\n        self.add_url_rule(rule, endpoint, view_func, provide_automatic_options, **options)\n\n    def _collect_openapi_info(\n            self,\n            rule: str,\n            func: Callable,\n            *,\n            tags: Optional[list[Tag]] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            external_docs: Optional[ExternalDocumentation] = None,\n            operation_id: Optional[str] = None,\n            responses: Optional[ResponseDict] = None,\n            deprecated: Optional[bool] = None,\n            security: Optional[list[dict[str, list[Any]]]] = None,\n            servers: Optional[list[Server]] = None,\n            openapi_extensions: Optional[dict[str, Any]] = None,\n            doc_ui: bool = True,\n            method: str = HTTPMethod.GET\n    ) -&gt; ParametersTuple:\n        \"\"\"\n        Collects OpenAPI specification information for Flask routes and view functions.\n\n        Args:\n            rule: Flask route\n            func: Flask view_func\n            tags: Adds metadata to a single tag.\n            summary: A short summary of what the operation does.\n            description: A verbose explanation of the operation behavior.\n            external_docs: Additional external documentation for this operation.\n            operation_id: Unique string used to identify the operation.\n            responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n            deprecated: Declares this operation to be deprecated.\n            security: A declaration of which security mechanisms can be used for this operation.\n            servers: An alternative server array to service this operation.\n            openapi_extensions: Allows extensions to the OpenAPI Schema.\n            doc_ui: Declares this operation to be shown. Default to True.\n        \"\"\"\n        if self.doc_ui is True and doc_ui is True:\n            # Convert key to string\n            new_responses = convert_responses_key_to_string(responses or {})\n\n            # Global response: combine API responses\n            combine_responses = {**self.abp_responses, **new_responses}\n\n            # Create operation\n            operation = get_operation(\n                func,\n                summary=summary,\n                description=description,\n                openapi_extensions=openapi_extensions\n            )\n\n            # Set external docs\n            if external_docs:\n                operation.externalDocs = external_docs\n\n            # Unique string used to identify the operation.\n            operation_id_kwargs = {\"name\": func.__name__, \"path\": rule, \"method\": method}\n            if \"bp_name\" in list(inspect.signature(self.operation_id_callback).parameters.keys()):\n                operation_id_kwargs[\"bp_name\"] = self.name\n            operation.operationId = operation_id or self.operation_id_callback(**operation_id_kwargs)\n\n            # Only set `deprecated` if True, otherwise leave it as None\n            if deprecated is not None:\n                operation.deprecated = deprecated\n\n            # Add security\n            _security = (security or []) + self.abp_security or None\n            if _security:\n                operation.security = _security\n\n            # Add servers\n            if servers:\n                operation.servers = servers\n\n            # Store tags\n            tags = (tags or []) + self.abp_tags\n            parse_and_store_tags(tags, self.tags, self.tag_names, operation)\n\n            # Parse response\n            get_responses(combine_responses, self.components_schemas, operation)\n\n            # Parse rule: merge url_prefix and format rule from /pet/&lt;petId&gt; to /pet/{petId}\n            uri = parse_rule(rule, url_prefix=self.url_prefix)\n\n            # Parse method\n            parse_method(uri, method, self.paths, operation)\n\n            # Parse parameters\n            return parse_parameters(func, components_schemas=self.components_schemas, operation=operation)\n        else:\n            return parse_parameters(func, doc_ui=False)\n</code></pre>"},{"location":"Reference/APIBlueprint/#flask_openapi3.APIBlueprint.__init__","title":"<code>__init__(name, import_name, *, abp_tags=None, abp_security=None, abp_responses=None, doc_ui=True, operation_id_callback=get_operation_id_for_path, **kwargs)</code>","text":"<p>Based on Flask Blueprint</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the blueprint. It Will be prepared to each endpoint name.</p> required <code>import_name</code> <code>str</code> <p>The name of the blueprint package, usually <code>__name__</code>.          This helps locate the <code>root_path</code> for the blueprint.</p> required <code>abp_tags</code> <code>Optional[list[Tag]]</code> <p>APIBlueprint tags for every API.</p> <code>None</code> <code>abp_security</code> <code>Optional[list[dict[str, list[str]]]]</code> <p>APIBlueprint security for every API.</p> <code>None</code> <code>abp_responses</code> <code>Optional[ResponseDict]</code> <p>API responses should be either a subclass of BaseModel, a dictionary, or None.</p> <code>None</code> <code>doc_ui</code> <code>bool</code> <p>Enable OpenAPI document UI (Swagger UI, Redoc, and Rapidoc). Defaults to True.</p> <code>True</code> <code>operation_id_callback</code> <code>Callable</code> <p>Callback function for custom operation_id generation.                    Receives name (str), path (str) and method (str) parameters.                    Defaults to <code>get_operation_id_for_path</code> from utils</p> <code>get_operation_id_for_path</code> <code>**kwargs</code> <code>Any</code> <p>Flask Blueprint kwargs</p> <code>{}</code> Source code in <code>flask_openapi3/blueprint.py</code> <pre><code>def __init__(\n        self,\n        name: str,\n        import_name: str,\n        *,\n        abp_tags: Optional[list[Tag]] = None,\n        abp_security: Optional[list[dict[str, list[str]]]] = None,\n        abp_responses: Optional[ResponseDict] = None,\n        doc_ui: bool = True,\n        operation_id_callback: Callable = get_operation_id_for_path,\n        **kwargs: Any\n) -&gt; None:\n    \"\"\"\n    Based on Flask Blueprint\n\n    Args:\n        name: The name of the blueprint. It Will be prepared to each endpoint name.\n        import_name: The name of the blueprint package, usually ``__name__``.\n                     This helps locate the ``root_path`` for the blueprint.\n        abp_tags: APIBlueprint tags for every API.\n        abp_security: APIBlueprint security for every API.\n        abp_responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n        doc_ui: Enable OpenAPI document UI (Swagger UI, Redoc, and Rapidoc). Defaults to True.\n        operation_id_callback: Callback function for custom operation_id generation.\n                               Receives name (str), path (str) and method (str) parameters.\n                               Defaults to `get_operation_id_for_path` from utils\n        **kwargs: Flask Blueprint kwargs\n    \"\"\"\n    super(APIBlueprint, self).__init__(name, import_name, **kwargs)\n\n    # Initialize instance variables\n    self.paths: dict = dict()\n    self.components_schemas: dict = dict()\n    self.tags: list[Tag] = []\n    self.tag_names: list[str] = []\n\n    # Set values from arguments or default values\n    self.abp_tags = abp_tags or []\n    self.abp_security = abp_security or []\n\n    # Convert key to string\n    self.abp_responses = convert_responses_key_to_string(abp_responses or {})\n\n    self.doc_ui = doc_ui\n\n    # Set the operation ID callback function\n    self.operation_id_callback: Callable = operation_id_callback\n</code></pre>"},{"location":"Reference/APIBlueprint/#flask_openapi3.APIBlueprint.register_api","title":"<code>register_api(api)</code>","text":"<p>Register a nested APIBlueprint</p> Source code in <code>flask_openapi3/blueprint.py</code> <pre><code>def register_api(self, api: \"APIBlueprint\") -&gt; None:\n    \"\"\"Register a nested APIBlueprint\"\"\"\n\n    # Check if the APIBlueprint is being registered on itself\n    if api is self:\n        raise ValueError(\"Cannot register a api blueprint on itself\")\n\n    # Merge tags from the nested APIBlueprint\n    for tag in api.tags:\n        if tag.name not in self.tag_names:\n            self.tags.append(tag)\n\n    # Merge paths from the nested APIBlueprint\n    for path_url, path_item in api.paths.items():\n        # Parse rule: merge url_prefix and format rule from /pet/&lt;petId&gt; to /pet/{petId}\n        uri = parse_rule(path_url, url_prefix=self.url_prefix)\n\n        self.paths[uri] = path_item\n\n    # Merge component schemas from the nested APIBlueprint\n    self.components_schemas.update(api.components_schemas)\n\n    # Register the nested APIBlueprint as a blueprint\n    self.register_blueprint(api)\n</code></pre>"},{"location":"Reference/APIView/","title":"APIView","text":""},{"location":"Reference/APIView/#flask_openapi3.view.APIView","title":"<code>APIView</code>","text":"Source code in <code>flask_openapi3/view.py</code> <pre><code>class APIView:\n    def __init__(\n            self,\n            url_prefix: Optional[str] = None,\n            view_tags: Optional[list[Tag]] = None,\n            view_security: Optional[list[dict[str, list[str]]]] = None,\n            view_responses: Optional[ResponseDict] = None,\n            doc_ui: bool = True,\n            operation_id_callback: Callable = get_operation_id_for_path,\n    ):\n        \"\"\"\n        Create a class-based view\n\n        Args:\n            url_prefix: A path to prepend to all the APIView's urls\n            view_tags: APIView tags for every API.\n            view_security: APIView security for every API.\n            view_responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n            doc_ui: Enable OpenAPI document UI (Swagger UI and Redoc). Defaults to True.\n            operation_id_callback: Callback function for custom operation_id generation.\n                                   Receives name (str), path (str) and method (str) parameters.\n                                   Defaults to `get_operation_id_for_path` from utils\n        \"\"\"\n        self.url_prefix = url_prefix\n        self.view_tags = view_tags or []\n        self.view_security = view_security or []\n\n        # Convert key to string\n        self.view_responses = convert_responses_key_to_string(view_responses or {})\n\n        self.doc_ui = doc_ui\n        self.operation_id_callback: Callable = operation_id_callback\n\n        self.views: dict = dict()\n        self.paths: dict = dict()\n        self.components_schemas: dict = dict()\n        self.tags: list[Tag] = []\n        self.tag_names: list[str] = []\n\n    def route(self, rule: str):\n        \"\"\"Decorator for view class\"\"\"\n\n        def wrapper(cls):\n            if self.views.get(rule):  # pragma: no cover\n                raise ValueError(f\"malformed url rule: {rule!r}\")\n            methods = []\n\n            # Parse rule: merge url_prefix and format rule from /pet/&lt;petId&gt; to /pet/{petId}\n            uri = parse_rule(rule, url_prefix=self.url_prefix)\n\n            for method in HTTPMethod:\n                cls_method = getattr(cls, method.lower(), None)\n                if not cls_method:\n                    continue\n                methods.append(method)\n                if self.doc_ui is False:\n                    continue\n                if not getattr(cls_method, \"operation\", None):\n                    continue\n                # Parse method\n                parse_method(uri, method, self.paths, cls_method.operation)\n                # Update operation_id\n                if not cls_method.operation.operationId:\n                    cls_method.operation.operationId = self.operation_id_callback(\n                        name=cls_method.__qualname__,\n                        path=rule,\n                        method=method\n                    )\n\n            # Convert route parameters from {param} to &lt;param&gt;\n            _rule = uri.replace(\"{\", \"&lt;\").replace(\"}\", \"&gt;\")\n            self.views[_rule] = (cls, methods)\n\n            return cls\n\n        return wrapper\n\n    def doc(\n            self,\n            *,\n            tags: Optional[list[Tag]] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            external_docs: Optional[ExternalDocumentation] = None,\n            operation_id: Optional[str] = None,\n            responses: Optional[ResponseDict] = None,\n            deprecated: Optional[bool] = None,\n            security: Optional[list[dict[str, list[Any]]]] = None,\n            servers: Optional[list[Server]] = None,\n            openapi_extensions: Optional[dict[str, Any]] = None,\n            doc_ui: bool = True\n    ) -&gt; Callable:\n        \"\"\"\n        Decorator for view method.\n        More information goto https://spec.openapis.org/oas/v3.1.0#operation-object\n\n        Args:\n            tags: Adds metadata to a single tag.\n            summary: A short summary of what the operation does.\n            description: A verbose explanation of the operation behavior.\n            external_docs: Additional external documentation for this operation.\n            operation_id: Unique string used to identify the operation.\n            responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n            deprecated: Declares this operation to be deprecated.\n            security: A declaration of which security mechanisms can be used for this operation.\n            servers: An alternative server array to service this operation.\n            openapi_extensions: Allows extensions to the OpenAPI Schema.\n            doc_ui: Declares this operation to be shown. Default to True.\n        \"\"\"\n\n        new_responses = convert_responses_key_to_string(responses or {})\n        security = security or []\n        tags = tags + self.view_tags if tags else self.view_tags\n\n        def decorator(func):\n            if self.doc_ui is False or doc_ui is False:\n                return func\n\n            # Global response combines API responses\n            combine_responses = {**self.view_responses, **new_responses}\n\n            # Create operation\n            operation = get_operation(\n                func,\n                summary=summary,\n                description=description,\n                openapi_extensions=openapi_extensions\n            )\n\n            # Set external docs\n            if external_docs:\n                operation.externalDocs = external_docs\n\n            # Unique string used to identify the operation.\n            if operation_id:\n                operation.operationId = operation_id\n\n            # Only set `deprecated` if True, otherwise leave it as None\n            if deprecated is not None:\n                operation.deprecated = deprecated\n\n            # Add security\n            _security = (security or []) + self.view_security or None\n            if _security:\n                operation.security = _security\n\n            # Add servers\n            if servers:\n                operation.servers = servers\n\n            # Store tags\n            parse_and_store_tags(tags, self.tags, self.tag_names, operation)\n\n            # Parse parameters\n            parse_parameters(\n                func,\n                components_schemas=self.components_schemas,\n                operation=operation\n            )\n\n            # Parse response\n            get_responses(combine_responses, self.components_schemas, operation)\n            func.operation = operation\n\n            return func\n\n        return decorator\n\n    def register(\n            self,\n            app: \"OpenAPI\",\n            url_prefix: Optional[str] = None,\n            view_kwargs: Optional[dict[Any, Any]] = None\n    ) -&gt; None:\n        \"\"\"\n        Register the API views with the given OpenAPI app.\n\n        Args:\n            app: An instance of the OpenAPI app.\n            url_prefix: A path to prepend to all the APIView's urls\n            view_kwargs: Additional keyword arguments to pass to the API views.\n        \"\"\"\n        for rule, (cls, methods) in self.views.items():\n            for method in methods:\n                func = getattr(cls, method.lower())\n                header, cookie, path, query, form, body, raw = parse_parameters(func, doc_ui=False)\n                view_func = app.create_view_func(\n                    func,\n                    header,\n                    cookie,\n                    path,\n                    query,\n                    form,\n                    body,\n                    raw,\n                    view_class=cls,\n                    view_kwargs=view_kwargs\n                )\n\n                if url_prefix and self.url_prefix and url_prefix != self.url_prefix:\n                    rule = url_prefix + rule.removeprefix(self.url_prefix)\n                elif url_prefix and not self.url_prefix:\n                    rule = url_prefix.rstrip(\"/\") + \"/\" + rule.lstrip(\"/\")\n\n                options = {\n                    \"endpoint\": cls.__name__ + \".\" + method.lower(),\n                    \"methods\": [method.upper()]\n                }\n                app.add_url_rule(rule, view_func=view_func, **options)\n</code></pre>"},{"location":"Reference/APIView/#flask_openapi3.view.APIView.__init__","title":"<code>__init__(url_prefix=None, view_tags=None, view_security=None, view_responses=None, doc_ui=True, operation_id_callback=get_operation_id_for_path)</code>","text":"<p>Create a class-based view</p> <p>Parameters:</p> Name Type Description Default <code>url_prefix</code> <code>Optional[str]</code> <p>A path to prepend to all the APIView's urls</p> <code>None</code> <code>view_tags</code> <code>Optional[list[Tag]]</code> <p>APIView tags for every API.</p> <code>None</code> <code>view_security</code> <code>Optional[list[dict[str, list[str]]]]</code> <p>APIView security for every API.</p> <code>None</code> <code>view_responses</code> <code>Optional[ResponseDict]</code> <p>API responses should be either a subclass of BaseModel, a dictionary, or None.</p> <code>None</code> <code>doc_ui</code> <code>bool</code> <p>Enable OpenAPI document UI (Swagger UI and Redoc). Defaults to True.</p> <code>True</code> <code>operation_id_callback</code> <code>Callable</code> <p>Callback function for custom operation_id generation.                    Receives name (str), path (str) and method (str) parameters.                    Defaults to <code>get_operation_id_for_path</code> from utils</p> <code>get_operation_id_for_path</code> Source code in <code>flask_openapi3/view.py</code> <pre><code>def __init__(\n        self,\n        url_prefix: Optional[str] = None,\n        view_tags: Optional[list[Tag]] = None,\n        view_security: Optional[list[dict[str, list[str]]]] = None,\n        view_responses: Optional[ResponseDict] = None,\n        doc_ui: bool = True,\n        operation_id_callback: Callable = get_operation_id_for_path,\n):\n    \"\"\"\n    Create a class-based view\n\n    Args:\n        url_prefix: A path to prepend to all the APIView's urls\n        view_tags: APIView tags for every API.\n        view_security: APIView security for every API.\n        view_responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n        doc_ui: Enable OpenAPI document UI (Swagger UI and Redoc). Defaults to True.\n        operation_id_callback: Callback function for custom operation_id generation.\n                               Receives name (str), path (str) and method (str) parameters.\n                               Defaults to `get_operation_id_for_path` from utils\n    \"\"\"\n    self.url_prefix = url_prefix\n    self.view_tags = view_tags or []\n    self.view_security = view_security or []\n\n    # Convert key to string\n    self.view_responses = convert_responses_key_to_string(view_responses or {})\n\n    self.doc_ui = doc_ui\n    self.operation_id_callback: Callable = operation_id_callback\n\n    self.views: dict = dict()\n    self.paths: dict = dict()\n    self.components_schemas: dict = dict()\n    self.tags: list[Tag] = []\n    self.tag_names: list[str] = []\n</code></pre>"},{"location":"Reference/APIView/#flask_openapi3.view.APIView.doc","title":"<code>doc(*, tags=None, summary=None, description=None, external_docs=None, operation_id=None, responses=None, deprecated=None, security=None, servers=None, openapi_extensions=None, doc_ui=True)</code>","text":"<p>Decorator for view method. More information goto https://spec.openapis.org/oas/v3.1.0#operation-object</p> <p>Parameters:</p> Name Type Description Default <code>tags</code> <code>Optional[list[Tag]]</code> <p>Adds metadata to a single tag.</p> <code>None</code> <code>summary</code> <code>Optional[str]</code> <p>A short summary of what the operation does.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>A verbose explanation of the operation behavior.</p> <code>None</code> <code>external_docs</code> <code>Optional[ExternalDocumentation]</code> <p>Additional external documentation for this operation.</p> <code>None</code> <code>operation_id</code> <code>Optional[str]</code> <p>Unique string used to identify the operation.</p> <code>None</code> <code>responses</code> <code>Optional[ResponseDict]</code> <p>API responses should be either a subclass of BaseModel, a dictionary, or None.</p> <code>None</code> <code>deprecated</code> <code>Optional[bool]</code> <p>Declares this operation to be deprecated.</p> <code>None</code> <code>security</code> <code>Optional[list[dict[str, list[Any]]]]</code> <p>A declaration of which security mechanisms can be used for this operation.</p> <code>None</code> <code>servers</code> <code>Optional[list[Server]]</code> <p>An alternative server array to service this operation.</p> <code>None</code> <code>openapi_extensions</code> <code>Optional[dict[str, Any]]</code> <p>Allows extensions to the OpenAPI Schema.</p> <code>None</code> <code>doc_ui</code> <code>bool</code> <p>Declares this operation to be shown. Default to True.</p> <code>True</code> Source code in <code>flask_openapi3/view.py</code> <pre><code>def doc(\n        self,\n        *,\n        tags: Optional[list[Tag]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        external_docs: Optional[ExternalDocumentation] = None,\n        operation_id: Optional[str] = None,\n        responses: Optional[ResponseDict] = None,\n        deprecated: Optional[bool] = None,\n        security: Optional[list[dict[str, list[Any]]]] = None,\n        servers: Optional[list[Server]] = None,\n        openapi_extensions: Optional[dict[str, Any]] = None,\n        doc_ui: bool = True\n) -&gt; Callable:\n    \"\"\"\n    Decorator for view method.\n    More information goto https://spec.openapis.org/oas/v3.1.0#operation-object\n\n    Args:\n        tags: Adds metadata to a single tag.\n        summary: A short summary of what the operation does.\n        description: A verbose explanation of the operation behavior.\n        external_docs: Additional external documentation for this operation.\n        operation_id: Unique string used to identify the operation.\n        responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n        deprecated: Declares this operation to be deprecated.\n        security: A declaration of which security mechanisms can be used for this operation.\n        servers: An alternative server array to service this operation.\n        openapi_extensions: Allows extensions to the OpenAPI Schema.\n        doc_ui: Declares this operation to be shown. Default to True.\n    \"\"\"\n\n    new_responses = convert_responses_key_to_string(responses or {})\n    security = security or []\n    tags = tags + self.view_tags if tags else self.view_tags\n\n    def decorator(func):\n        if self.doc_ui is False or doc_ui is False:\n            return func\n\n        # Global response combines API responses\n        combine_responses = {**self.view_responses, **new_responses}\n\n        # Create operation\n        operation = get_operation(\n            func,\n            summary=summary,\n            description=description,\n            openapi_extensions=openapi_extensions\n        )\n\n        # Set external docs\n        if external_docs:\n            operation.externalDocs = external_docs\n\n        # Unique string used to identify the operation.\n        if operation_id:\n            operation.operationId = operation_id\n\n        # Only set `deprecated` if True, otherwise leave it as None\n        if deprecated is not None:\n            operation.deprecated = deprecated\n\n        # Add security\n        _security = (security or []) + self.view_security or None\n        if _security:\n            operation.security = _security\n\n        # Add servers\n        if servers:\n            operation.servers = servers\n\n        # Store tags\n        parse_and_store_tags(tags, self.tags, self.tag_names, operation)\n\n        # Parse parameters\n        parse_parameters(\n            func,\n            components_schemas=self.components_schemas,\n            operation=operation\n        )\n\n        # Parse response\n        get_responses(combine_responses, self.components_schemas, operation)\n        func.operation = operation\n\n        return func\n\n    return decorator\n</code></pre>"},{"location":"Reference/APIView/#flask_openapi3.view.APIView.register","title":"<code>register(app, url_prefix=None, view_kwargs=None)</code>","text":"<p>Register the API views with the given OpenAPI app.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>OpenAPI</code> <p>An instance of the OpenAPI app.</p> required <code>url_prefix</code> <code>Optional[str]</code> <p>A path to prepend to all the APIView's urls</p> <code>None</code> <code>view_kwargs</code> <code>Optional[dict[Any, Any]]</code> <p>Additional keyword arguments to pass to the API views.</p> <code>None</code> Source code in <code>flask_openapi3/view.py</code> <pre><code>def register(\n        self,\n        app: \"OpenAPI\",\n        url_prefix: Optional[str] = None,\n        view_kwargs: Optional[dict[Any, Any]] = None\n) -&gt; None:\n    \"\"\"\n    Register the API views with the given OpenAPI app.\n\n    Args:\n        app: An instance of the OpenAPI app.\n        url_prefix: A path to prepend to all the APIView's urls\n        view_kwargs: Additional keyword arguments to pass to the API views.\n    \"\"\"\n    for rule, (cls, methods) in self.views.items():\n        for method in methods:\n            func = getattr(cls, method.lower())\n            header, cookie, path, query, form, body, raw = parse_parameters(func, doc_ui=False)\n            view_func = app.create_view_func(\n                func,\n                header,\n                cookie,\n                path,\n                query,\n                form,\n                body,\n                raw,\n                view_class=cls,\n                view_kwargs=view_kwargs\n            )\n\n            if url_prefix and self.url_prefix and url_prefix != self.url_prefix:\n                rule = url_prefix + rule.removeprefix(self.url_prefix)\n            elif url_prefix and not self.url_prefix:\n                rule = url_prefix.rstrip(\"/\") + \"/\" + rule.lstrip(\"/\")\n\n            options = {\n                \"endpoint\": cls.__name__ + \".\" + method.lower(),\n                \"methods\": [method.upper()]\n            }\n            app.add_url_rule(rule, view_func=view_func, **options)\n</code></pre>"},{"location":"Reference/APIView/#flask_openapi3.view.APIView.route","title":"<code>route(rule)</code>","text":"<p>Decorator for view class</p> Source code in <code>flask_openapi3/view.py</code> <pre><code>def route(self, rule: str):\n    \"\"\"Decorator for view class\"\"\"\n\n    def wrapper(cls):\n        if self.views.get(rule):  # pragma: no cover\n            raise ValueError(f\"malformed url rule: {rule!r}\")\n        methods = []\n\n        # Parse rule: merge url_prefix and format rule from /pet/&lt;petId&gt; to /pet/{petId}\n        uri = parse_rule(rule, url_prefix=self.url_prefix)\n\n        for method in HTTPMethod:\n            cls_method = getattr(cls, method.lower(), None)\n            if not cls_method:\n                continue\n            methods.append(method)\n            if self.doc_ui is False:\n                continue\n            if not getattr(cls_method, \"operation\", None):\n                continue\n            # Parse method\n            parse_method(uri, method, self.paths, cls_method.operation)\n            # Update operation_id\n            if not cls_method.operation.operationId:\n                cls_method.operation.operationId = self.operation_id_callback(\n                    name=cls_method.__qualname__,\n                    path=rule,\n                    method=method\n                )\n\n        # Convert route parameters from {param} to &lt;param&gt;\n        _rule = uri.replace(\"{\", \"&lt;\").replace(\"}\", \"&gt;\")\n        self.views[_rule] = (cls, methods)\n\n        return cls\n\n    return wrapper\n</code></pre>"},{"location":"Reference/Models/","title":"Models","text":""},{"location":"Reference/Models/#flask_openapi3.models.APISpec","title":"<code>APISpec</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#openapi-object</p> Source code in <code>flask_openapi3/models/__init__.py</code> <pre><code>class APISpec(BaseModel):\n    \"\"\"https://spec.openapis.org/oas/v3.1.0#openapi-object\"\"\"\n    openapi: str\n    info: Info\n    servers: Optional[list[Server]] = None\n    paths: Paths\n    components: Optional[Components] = None\n    security: Optional[list[SecurityRequirement]] = None\n    tags: Optional[list[Tag]] = None\n    externalDocs: Optional[ExternalDocumentation] = None\n    webhooks: Optional[dict[str, Union[PathItem, Reference]]] = None\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.OAuthConfig","title":"<code>OAuthConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md#oauth-20-configuration</p> Source code in <code>flask_openapi3/models/__init__.py</code> <pre><code>class OAuthConfig(BaseModel):\n    \"\"\"\n    https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/oauth2.md#oauth-20-configuration\n    \"\"\"\n    clientId: Optional[str] = None\n    clientSecret: Optional[str] = None\n    realm: Optional[str] = None\n    appName: Optional[str] = None\n    scopeSeparator: Optional[str] = None\n    scopes: Optional[str] = None\n    additionalQueryStringParams: Optional[dict[str, str]] = None\n    useBasicAuthenticationWithAccessCodeGrant: Optional[bool] = False\n    usePkceWithAuthorizationCodeGrant: Optional[bool] = False\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.Callback","title":"<code>Callback = dict[str, PathItem]</code>  <code>module-attribute</code>","text":""},{"location":"Reference/Models/#flask_openapi3.models.Components","title":"<code>Components</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#components-object</p> Source code in <code>flask_openapi3/models/components.py</code> <pre><code>class Components(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#components-object\n    \"\"\"\n\n    schemas: Optional[dict[str, Union[Reference, Schema]]] = Field(None)\n    responses: Optional[dict[str, Union[Response, Reference]]] = None\n    parameters: Optional[dict[str, Union[Parameter, Reference]]] = None\n    examples: Optional[dict[str, Union[Example, Reference]]] = None\n    requestBodies: Optional[dict[str, Union[RequestBody, Reference]]] = None\n    headers: Optional[dict[str, Union[Header, Reference]]] = None\n    securitySchemes: Optional[dict[str, Union[SecurityScheme, dict[str, Any]]]] = None\n    links: Optional[dict[str, Union[Link, Reference]]] = None\n    callbacks: Optional[dict[str, Union[Callback, Reference]]] = None\n    pathItems: Optional[dict[str, Union[PathItem, Reference]]] = None\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.Contact","title":"<code>Contact</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#contact-object</p> Source code in <code>flask_openapi3/models/contact.py</code> <pre><code>class Contact(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#contact-object\n    \"\"\"\n\n    name: Optional[str] = None\n    url: Optional[str] = None\n    email: Optional[str] = None\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.Discriminator","title":"<code>Discriminator</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#discriminator-object</p> Source code in <code>flask_openapi3/models/discriminator.py</code> <pre><code>class Discriminator(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#discriminator-object\n    \"\"\"\n\n    propertyName: str\n    mapping: Optional[dict[str, str]] = None\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.Encoding","title":"<code>Encoding</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#encoding-object</p> Source code in <code>flask_openapi3/models/encoding.py</code> <pre><code>class Encoding(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#encoding-object\n    \"\"\"\n\n    contentType: Optional[str] = None\n    headers: Optional[dict[str, Union[Header, Reference]]] = None\n    style: Optional[str] = None\n    explode: Optional[bool] = None\n    allowReserved: bool = False\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.Example","title":"<code>Example</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#example-object</p> Source code in <code>flask_openapi3/models/example.py</code> <pre><code>class Example(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#example-object\n    \"\"\"\n\n    summary: Optional[str] = None\n    description: Optional[str] = None\n    value: Optional[Any] = None\n    externalValue: Optional[str] = None\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.ExternalDocumentation","title":"<code>ExternalDocumentation</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#external-documentation-object</p> Source code in <code>flask_openapi3/models/external_documentation.py</code> <pre><code>class ExternalDocumentation(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#external-documentation-object\n    \"\"\"\n\n    description: Optional[str] = None\n    url: str\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.FileStorage","title":"<code>FileStorage</code>","text":"<p>               Bases: <code>FileStorage</code></p> <p>An uploaded file included as part of the request data.</p> Source code in <code>flask_openapi3/models/file.py</code> <pre><code>class FileStorage(_FileStorage):\n    \"\"\"\n    An uploaded file included as part of the request data.\n    \"\"\"\n\n    @classmethod\n    def __get_pydantic_json_schema__(cls, *_args: Any, **_kwargs: Any) -&gt; JsonSchemaValue:\n        field_schema = {\"format\": \"binary\", \"type\": \"string\"}\n        return field_schema\n\n    @classmethod\n    def __get_pydantic_core_schema__(cls, *_args: Any, **_kwargs: Any) -&gt; core_schema.CoreSchema:\n        return core_schema.with_info_plain_validator_function(cls.validate)\n\n    @classmethod\n    def validate(cls, value: _FileStorage, *_args: Any, **_kwargs: Any) -&gt; _FileStorage:\n        return value\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.Header","title":"<code>Header</code>","text":"<p>               Bases: <code>Parameter</code></p> <p>https://spec.openapis.org/oas/v3.1.0#header-object</p> Source code in <code>flask_openapi3/models/header.py</code> <pre><code>class Header(Parameter):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#header-object\n    \"\"\"\n\n    name: Optional[str] = None  # type:ignore\n    param_in: Optional[ParameterInType] = None  # type:ignore\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.Info","title":"<code>Info</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#info-object</p> Source code in <code>flask_openapi3/models/info.py</code> <pre><code>class Info(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#info-object\n    \"\"\"\n\n    title: str\n    summary: Optional[str] = None\n    description: Optional[str] = None\n    termsOfService: Optional[str] = None\n    contact: Optional[Contact] = None\n    license: Optional[License] = None\n    version: str\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.License","title":"<code>License</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#license-object</p> Source code in <code>flask_openapi3/models/license.py</code> <pre><code>class License(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#license-object\n    \"\"\"\n\n    name: str\n    identifier: Optional[str] = None\n    url: Optional[str] = None\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.Link","title":"<code>Link</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#link-object</p> Source code in <code>flask_openapi3/models/link.py</code> <pre><code>class Link(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#link-object\n    \"\"\"\n\n    operationRef: Optional[str] = None\n    operationId: Optional[str] = None\n    parameters: Optional[dict[str, Any]] = None\n    requestBody: Optional[Any] = None\n    description: Optional[str] = None\n    server: Optional[Server] = None\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.MediaType","title":"<code>MediaType</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#media-type-object</p> Source code in <code>flask_openapi3/models/media_type.py</code> <pre><code>class MediaType(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#media-type-object\n    \"\"\"\n\n    media_type_schema: Optional[Union[Reference, Schema]] = Field(default=None, alias=\"schema\")\n    example: Optional[Any] = None\n    examples: Optional[dict[str, Union[Example, Reference]]] = None\n    encoding: Optional[dict[str, Encoding]] = None\n\n    model_config = {\n        \"extra\": \"allow\",\n        \"populate_by_name\": True\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.OAuthFlow","title":"<code>OAuthFlow</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#oauth-flow-object</p> Source code in <code>flask_openapi3/models/oauth_flow.py</code> <pre><code>class OAuthFlow(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#oauth-flow-object\n    \"\"\"\n\n    authorizationUrl: Optional[str] = None\n    tokenUrl: Optional[str] = None\n    refreshUrl: Optional[str] = None\n    scopes: dict[str, str]\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.OAuthFlows","title":"<code>OAuthFlows</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#oauth-flows-object</p> Source code in <code>flask_openapi3/models/oauth_flows.py</code> <pre><code>class OAuthFlows(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#oauth-flows-object\n    \"\"\"\n\n    implicit: Optional[OAuthFlow] = None\n    password: Optional[OAuthFlow] = None\n    clientCredentials: Optional[OAuthFlow] = None\n    authorizationCode: Optional[OAuthFlow] = None\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.Operation","title":"<code>Operation</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#operation-object</p> Source code in <code>flask_openapi3/models/operation.py</code> <pre><code>class Operation(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#operation-object\n    \"\"\"\n\n    tags: Optional[list[str]] = None\n    summary: Optional[str] = None\n    description: Optional[str] = None\n    externalDocs: Optional[ExternalDocumentation] = None\n    operationId: Optional[str] = None\n    parameters: Optional[list[Parameter]] = None\n    requestBody: Optional[Union[RequestBody, Reference]] = None\n    responses: Optional[dict[str, Response]] = None\n    callbacks: Optional[dict[str, Callback]] = None\n\n    deprecated: Optional[bool] = False\n    security: Optional[list[SecurityRequirement]] = None\n    servers: Optional[list[Server]] = None\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.Parameter","title":"<code>Parameter</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#parameter-object</p> Source code in <code>flask_openapi3/models/parameter.py</code> <pre><code>class Parameter(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#parameter-object\n    \"\"\"\n\n    name: str\n    param_in: ParameterInType = Field(alias=\"in\")\n    description: Optional[str] = None\n    required: Optional[bool] = None\n    deprecated: Optional[bool] = None\n    allowEmptyValue: Optional[bool] = None\n    style: Optional[str] = None\n    explode: Optional[bool] = None\n    allowReserved: Optional[bool] = None\n    param_schema: Optional[Union[Reference, Schema]] = Field(default=None, alias=\"schema\")\n    example: Optional[Any] = None\n    examples: Optional[dict[str, Union[Example, Reference]]] = None\n    content: Optional[dict[str, MediaType]] = None\n\n    model_config = {\n        \"extra\": \"allow\",\n        \"populate_by_name\": True\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.ParameterInType","title":"<code>ParameterInType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The place Parameters can be put when calling an Endpoint</p> Source code in <code>flask_openapi3/models/parameter_in_type.py</code> <pre><code>class ParameterInType(str, Enum):\n    \"\"\"The place Parameters can be put when calling an Endpoint\"\"\"\n\n    QUERY = \"query\"\n    PATH = \"path\"\n    HEADER = \"header\"\n    COOKIE = \"cookie\"\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.PathItem","title":"<code>PathItem</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#path-item-object</p> Source code in <code>flask_openapi3/models/path_item.py</code> <pre><code>class PathItem(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#path-item-object\n    \"\"\"\n    ref: Optional[str] = Field(default=None, alias=\"$ref\")\n    summary: Optional[str] = None\n    description: Optional[str] = None\n    get: Optional[\"Operation\"] = None\n    put: Optional[\"Operation\"] = None\n    post: Optional[\"Operation\"] = None\n    delete: Optional[\"Operation\"] = None\n    options: Optional[\"Operation\"] = None\n    head: Optional[\"Operation\"] = None\n    patch: Optional[\"Operation\"] = None\n    trace: Optional[\"Operation\"] = None\n    servers: Optional[list[Server]] = None\n    parameters: Optional[list[Union[Parameter, Reference]]] = None\n\n    model_config = {\n        \"extra\": \"allow\",\n        \"populate_by_name\": True\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.Paths","title":"<code>Paths = dict[str, PathItem]</code>  <code>module-attribute</code>","text":""},{"location":"Reference/Models/#flask_openapi3.models.Reference","title":"<code>Reference</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#reference-object</p> Source code in <code>flask_openapi3/models/reference.py</code> <pre><code>class Reference(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#reference-object\n    \"\"\"\n\n    ref: str = Field(..., alias=\"$ref\")\n\n    model_config = {\n        \"extra\": \"allow\",\n        \"populate_by_name\": True\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.RequestBody","title":"<code>RequestBody</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#request-body-object</p> Source code in <code>flask_openapi3/models/request_body.py</code> <pre><code>class RequestBody(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#request-body-object\n    \"\"\"\n\n    description: Optional[str] = None\n    content: dict[str, MediaType]\n    required: Optional[bool] = True\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.Response","title":"<code>Response</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#response-object</p> Source code in <code>flask_openapi3/models/response.py</code> <pre><code>class Response(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#response-object\n    \"\"\"\n\n    description: str\n    headers: Optional[dict[str, Union[Header, Reference]]] = None\n    content: Optional[dict[str, MediaType]] = None\n    links: Optional[dict[str, Union[Link, Reference]]] = None\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.Responses","title":"<code>Responses = dict[str, Union[Response, Reference]]</code>  <code>module-attribute</code>","text":""},{"location":"Reference/Models/#flask_openapi3.models.Schema","title":"<code>Schema</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#schema-object</p> Source code in <code>flask_openapi3/models/schema.py</code> <pre><code>class Schema(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#schema-object\n    \"\"\"\n    ref: Optional[str] = Field(alias=\"$ref\", default=None)\n    title: Optional[str] = None\n    multipleOf: Optional[float] = Field(default=None, gt=0.0)\n    maximum: Optional[Union[int, float]] = None\n    exclusiveMaximum: Optional[float] = None\n    minimum: Optional[float] = None\n    exclusiveMinimum: Optional[float] = None\n    maxLength: Optional[int] = Field(default=None, ge=0)\n    minLength: Optional[int] = Field(default=None, ge=0)\n    pattern: Optional[str] = None\n    maxItems: Optional[int] = Field(default=None, ge=0)\n    minItems: Optional[int] = Field(default=None, ge=0)\n    uniqueItems: Optional[bool] = None\n    maxProperties: Optional[int] = Field(default=None, ge=0)\n    minProperties: Optional[int] = Field(default=None, ge=0)\n    required: Optional[list[str]] = Field(default=None)\n    enum: Union[None, list[Any]] = Field(default=None)\n    type: Optional[DataType] = Field(default=None)\n    allOf: Optional[list[Union[Reference, \"Schema\"]]] = None\n    oneOf: Optional[list[Union[Reference, \"Schema\"]]] = None\n    anyOf: Optional[list[Union[Reference, \"Schema\"]]] = None\n    schema_not: Optional[Union[Reference, \"Schema\"]] = Field(default=None, alias=\"not\")\n    items: Optional[Union[Reference, \"Schema\"]] = None\n    properties: Optional[dict[str, Union[Reference, \"Schema\"]]] = None\n    prefixItems: Optional[list[Union[Reference, \"Schema\"]]] = None\n    additionalProperties: Optional[Union[bool, Reference, \"Schema\"]] = None\n    description: Optional[str] = None\n    schema_format: Optional[str] = Field(default=None, alias=\"format\")\n    default: Optional[Any] = None\n    nullable: Optional[bool] = None\n    discriminator: Optional[Discriminator] = None\n    readOnly: Optional[bool] = None\n    writeOnly: Optional[bool] = None\n    xml: Optional[XML] = None\n    externalDocs: Optional[ExternalDocumentation] = None\n    example: Optional[Any] = None\n    deprecated: Optional[bool] = None\n\n    model_config = {\n        \"populate_by_name\": True\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.SecurityRequirement","title":"<code>SecurityRequirement = dict[str, list[str]]</code>  <code>module-attribute</code>","text":""},{"location":"Reference/Models/#flask_openapi3.models.SecurityScheme","title":"<code>SecurityScheme</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#security-scheme-object</p> Source code in <code>flask_openapi3/models/security_scheme.py</code> <pre><code>class SecurityScheme(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#security-scheme-object\n    \"\"\"\n\n    type: str\n    description: Optional[str] = None\n    name: Optional[str] = None\n    security_scheme_in: Optional[SecuritySchemeInType] = Field(default=None, alias=\"in\")\n    scheme: Optional[str] = None\n    bearerFormat: Optional[str] = None\n    flows: Optional[OAuthFlows] = None\n    openIdConnectUrl: Optional[str] = None\n\n    model_config = {\n        \"extra\": \"allow\",\n        \"populate_by_name\": True\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.Server","title":"<code>Server</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#server-object</p> Source code in <code>flask_openapi3/models/server.py</code> <pre><code>class Server(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#server-object\n    \"\"\"\n\n    url: str\n    description: Optional[str] = None\n    variables: Optional[dict[str, ServerVariable]] = None\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.ServerVariable","title":"<code>ServerVariable</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#server-variable-object</p> Source code in <code>flask_openapi3/models/server_variable.py</code> <pre><code>class ServerVariable(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#server-variable-object\n    \"\"\"\n\n    enum: Optional[list[str]] = Field(None, min_length=1)\n    default: str\n    description: Optional[str] = None\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.StyleValues","title":"<code>StyleValues</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> Source code in <code>flask_openapi3/models/style_values.py</code> <pre><code>class StyleValues(str, Enum):\n    matrix = \"matrix\"\n    label = \"label\"\n    form = \"form\"\n    simple = \"simple\"\n    spaceDelimited = \"spaceDelimited\"\n    pipeDelimited = \"pipeDelimited\"\n    deepObject = \"deepObject\"\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.Tag","title":"<code>Tag</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#tag-object</p> Source code in <code>flask_openapi3/models/tag.py</code> <pre><code>class Tag(BaseModel):\n    \"\"\"\n    https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#tag-object\n    \"\"\"\n\n    name: str\n    description: Optional[str] = None\n    externalDocs: Optional[ExternalDocumentation] = None\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.ValidationErrorModel","title":"<code>ValidationErrorModel</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>flask_openapi3/models/validation_error.py</code> <pre><code>class ValidationErrorModel(BaseModel):\n    # More information: https://docs.pydantic.dev/latest/usage/models/#error-handling\n    loc: Optional[list[str]] = Field(None, title=\"Location\", description=\"the error's location as a list. \")\n    msg: Optional[str] = Field(None, title=\"Message\", description=\"a computer-readable identifier of the error type.\")\n    type_: Optional[str] = Field(None, title=\"Error Type\", description=\"a human readable explanation of the error.\")\n    ctx: Optional[dict[str, Any]] = Field(\n        None,\n        title=\"Error context\",\n        description=\"an optional object which contains values required to render the error message.\"\n    )\n</code></pre>"},{"location":"Reference/Models/#flask_openapi3.models.XML","title":"<code>XML</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>https://spec.openapis.org/oas/v3.1.0#xml-object</p> Source code in <code>flask_openapi3/models/xml.py</code> <pre><code>class XML(BaseModel):\n    \"\"\"\n    https://spec.openapis.org/oas/v3.1.0#xml-object\n    \"\"\"\n\n    name: Optional[str] = None\n    namespace: Optional[str] = None\n    prefix: Optional[str] = None\n    attribute: bool = False\n    wrapped: bool = False\n\n    model_config = {\n        \"extra\": \"allow\"\n    }\n</code></pre>"},{"location":"Reference/OpenAPI/","title":"OpenAPI","text":""},{"location":"Reference/OpenAPI/#flask_openapi3.OpenAPI","title":"<code>OpenAPI</code>","text":"<p>               Bases: <code>APIScaffold</code>, <code>Flask</code></p> Source code in <code>flask_openapi3/openapi.py</code> <pre><code>class OpenAPI(APIScaffold, Flask):\n    def __init__(\n            self,\n            import_name: str,\n            *,\n            info: Optional[Info] = None,\n            security_schemes: Optional[SecuritySchemesDict] = None,\n            responses: Optional[ResponseDict] = None,\n            servers: Optional[list[Server]] = None,\n            external_docs: Optional[ExternalDocumentation] = None,\n            operation_id_callback: Callable = get_operation_id_for_path,\n            openapi_extensions: Optional[dict[str, Any]] = None,\n            validation_error_status: Union[str, int] = 422,\n            validation_error_model: Type[BaseModel] = ValidationErrorModel,\n            validation_error_callback: Callable = make_validation_error_response,\n            doc_ui: bool = True,\n            doc_prefix: str = \"/openapi\",\n            doc_url: str = \"/openapi.json\",\n            **kwargs: Any\n    ) -&gt; None:\n        \"\"\"\n        OpenAPI class that provides REST API functionality along with Swagger UI and Redoc.\n\n        Args:\n            import_name: The import name for the Flask application.\n            info: Information about the API (title, version, etc.).\n                See https://spec.openapis.org/oas/v3.1.0#info-object.\n            security_schemes: Security schemes for the API.\n                See https://spec.openapis.org/oas/v3.1.0#security-scheme-object.\n            responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n            servers: An array of Server objects providing connectivity information to a target server.\n            external_docs: External documentation for the API.\n                See: https://spec.openapis.org/oas/v3.1.0#external-documentation-object.\n            operation_id_callback: Callback function for custom operation ID generation.\n                Receives name (str), path (str), and method (str) parameters.\n                Defaults to `get_operation_id_for_path` from utils.\n            openapi_extensions: Extensions to the OpenAPI Schema.\n                See https://spec.openapis.org/oas/v3.1.0#specification-extensions.\n            validation_error_status:\n                HTTP Status of the response given when a validation error is detected by pydantic.\n                Defaults to 422.\n            validation_error_model: Validation error response model for OpenAPI Specification.\n            validation_error_callback: Validation error response callback, the return format corresponds to\n                the validation_error_model.\n            doc_ui: Enable OpenAPI document UI (Swagger UI and Redoc).\n                Defaults to True.\n            doc_prefix: URL prefix used for OpenAPI document and UI.\n                Defaults to \"/openapi\".\n            doc_url: URL for accessing the OpenAPI specification document in JSON format.\n                Defaults to \"/openapi.json\".\n            **kwargs: Additional kwargs to be passed to Flask.\n        \"\"\"\n        super(OpenAPI, self).__init__(import_name, **kwargs)\n\n        # Set OpenAPI version and API information\n        self.openapi_version = \"3.1.0\"\n        self.info = info or Info(title=\"OpenAPI\", version=\"1.0.0\")\n\n        # Set security schemes, responses, paths and components\n        self.security_schemes = security_schemes\n\n        # Convert key to string\n        self.responses = convert_responses_key_to_string(responses or {})\n\n        # Initialize instance variables\n        self.paths: dict = dict()\n        self.components_schemas: dict = dict()\n        self.components = Components()\n\n        # Initialize lists for tags and tag names\n        self.tags: list[Tag] = []\n        self.tag_names: list[str] = []\n\n        # Set URL prefixes and endpoints\n        self.doc_prefix = doc_prefix\n        self.doc_url = doc_url\n\n        # Set servers and external documentation\n        self.severs = servers\n        self.external_docs = external_docs\n\n        # Set the operation ID callback function\n        self.operation_id_callback: Callable = operation_id_callback\n\n        # Set OpenAPI extensions\n        self.openapi_extensions = openapi_extensions or {}\n\n        # Set HTTP Response of validation errors within OpenAPI\n        self.validation_error_status = str(validation_error_status)\n        self.validation_error_model = validation_error_model\n        self.validation_error_callback = validation_error_callback\n\n        # Initialize the OpenAPI documentation UI\n        if doc_ui:\n            self._init_doc()\n\n        # Add the OpenAPI command\n        self.cli.add_command(openapi_command)  # type: ignore\n\n        # Initialize specification JSON\n        self.spec_json: dict = {}\n        self.spec = APISpec(\n            openapi=self.openapi_version,\n            info=self.info,\n            paths=self.paths\n        )\n\n    def _init_doc(self) -&gt; None:\n        \"\"\"\n        Provide Swagger UI, Redoc, and Rapidoc\n        \"\"\"\n        _here = os.path.dirname(__file__)\n        template_folder = os.path.join(_here, \"templates\")\n        static_folder = os.path.join(template_folder, \"static\")\n\n        # Create the blueprint for OpenAPI documentation\n        blueprint = Blueprint(\n            \"openapi\",\n            __name__,\n            url_prefix=self.doc_prefix,\n            template_folder=template_folder,\n            static_folder=static_folder\n        )\n\n        # Add the API documentation URL rule\n        blueprint.add_url_rule(\n            rule=self.doc_url,\n            endpoint=\"doc_url\",\n            view_func=lambda: self.api_doc\n        )\n\n        ui_templates = []\n        # Iterate over all entry points in the \"flask_openapi3.plugins\" group\n        for entry_point in entry_points(group=\"flask_openapi3.plugins\"):\n            try:\n                module_path = entry_point.value\n                module_name, class_name = module_path.rsplit(\".\", 1)\n                module = import_module(module_name)\n                plugin_class = getattr(module, class_name)\n                plugin_register = plugin_class.register\n                plugin_name = plugin_class.name\n                plugin_display_name = plugin_class.display_name\n                bp = plugin_register(doc_url=self.doc_url.lstrip(\"/\"))\n                self.register_blueprint(bp, url_prefix=self.doc_prefix)\n                ui_templates.append({\"name\": plugin_name, \"display_name\": plugin_display_name})\n            except (ModuleNotFoundError, AttributeError):  # pragma: no cover\n                import traceback\n                print(f\"Warning: plugin '{entry_point.value}' registration failed.\")\n                traceback.print_exc()\n\n        # Add URL rule for the home page\n        blueprint.add_url_rule(\n            rule=\"/\",\n            endpoint=\"openapi\",\n            view_func=lambda: render_template_string(\n                self.config.get(\"OPENAPI_HTML_STRING\") or openapi_html_string,\n                ui_templates=ui_templates\n            )\n        )\n\n        # Register the blueprint with the Flask application\n        self.register_blueprint(blueprint)\n\n    @property\n    def api_doc(self) -&gt; dict:\n        \"\"\"\n        Generate the OpenAPI specification JSON.\n\n        Returns:\n            The OpenAPI specification JSON as a dictionary.\n\n        \"\"\"\n        if self.spec_json:\n            return self.spec_json\n\n        self.generate_spec_json()\n\n        return self.spec_json\n\n    def generate_spec_json(self):\n        self.spec.openapi = self.openapi_version\n        self.spec.info = self.info\n        self.spec.paths = self.paths\n\n        if self.severs:\n            self.spec.servers = self.severs\n\n        if self.external_docs:\n            self.spec.externalDocs = self.external_docs\n\n        # Set tags\n        if self.tags:\n            self.spec.tags = self.tags\n\n        # Add ValidationErrorModel to components schemas\n        schema = get_model_schema(self.validation_error_model)\n        self.components_schemas[self.validation_error_model.__name__] = Schema(**schema)\n\n        # Parse definitions\n        definitions = schema.get(\"$defs\", {})\n        for name, value in definitions.items():\n            self.components_schemas[name] = Schema(**value)\n\n        # Set components\n        self.components.schemas = self.components_schemas\n        self.components.securitySchemes = self.security_schemes\n        self.spec.components = self.components\n\n        # Convert spec to JSON\n        self.spec_json = self.spec.model_dump(mode=\"json\", by_alias=True, exclude_unset=True, warnings=False)\n\n        # Update with OpenAPI extensions\n        self.spec_json.update(**self.openapi_extensions)\n\n        # Handle validation error response\n        for rule, path_item in self.spec_json[\"paths\"].items():\n            for http_method, operation in path_item.items():\n                if operation.get(\"parameters\") is None and operation.get(\"requestBody\") is None:\n                    continue\n                if not operation.get(\"responses\"):\n                    operation[\"responses\"] = {}\n                if operation[\"responses\"].get(self.validation_error_status):\n                    continue\n                operation[\"responses\"][self.validation_error_status] = {\n                    \"description\": HTTP_STATUS[self.validation_error_status],\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"type\": \"array\",\n                                \"items\": {\"$ref\": f\"{OPENAPI3_REF_PREFIX}/{self.validation_error_model.__name__}\"}\n                            }\n                        }\n                    }\n                }\n\n    def register_api(self, api: APIBlueprint, **options: Any) -&gt; None:\n        \"\"\"\n        Register an APIBlueprint.\n\n        Args:\n            api: The APIBlueprint instance to register.\n\n            options: Additional keyword arguments are passed to :class:`~flask.blueprints.BlueprintSetupState`.\n            They can be accessed in :meth:`~flask.Blueprint.record` callbacks.\n            url_prefix, Blueprint routes will be prefixed with this.\n            subdomain, Blueprint routes will match on this subdomain.\n            url_defaults, Blueprint routes will use these default values for view arguments.\n\n        \"\"\"\n        for tag in api.tags:\n            if tag.name not in self.tag_names:\n                # Append tag to the list of tags\n                self.tags.append(tag)\n\n                # Append tag name to the list of tag names\n                self.tag_names.append(tag.name)\n\n        # Update paths with the APIBlueprint's paths\n        url_prefix = options.get(\"url_prefix\")\n        if url_prefix and api.url_prefix and url_prefix != api.url_prefix:\n            api.paths = {url_prefix + k.removeprefix(api.url_prefix): v for k, v in api.paths.items()}\n        elif url_prefix and not api.url_prefix:\n            api.paths = {url_prefix.rstrip(\"/\") + \"/\" + k.lstrip(\"/\"): v for k, v in api.paths.items()}\n        self.paths.update(**api.paths)\n\n        # Update component schemas with the APIBlueprint's component schemas\n        self.components_schemas.update(**api.components_schemas)\n\n        # Register the APIBlueprint with the current instance\n        self.register_blueprint(api, **options)\n\n    def register_api_view(\n            self,\n            api_view: APIView,\n            url_prefix: Optional[str] = None,\n            view_kwargs: Optional[dict[Any, Any]] = None\n    ) -&gt; None:\n        \"\"\"\n        Register APIView\n\n        Args:\n            api_view: The APIView instance to register.\n            url_prefix: A path to prepend to all the APIView's urls\n            view_kwargs: Additional keyword arguments to pass to the API views.\n        \"\"\"\n        if view_kwargs is None:\n            view_kwargs = {}\n\n        # Iterate through tags of the APIView\n        for tag in api_view.tags:\n            if tag.name not in self.tag_names:\n                # Append tag to the list of tags\n                self.tags.append(tag)\n\n                # Append tag name to the list of tag names\n                self.tag_names.append(tag.name)\n\n        # Update paths with the APIView's paths\n        if url_prefix and api_view.url_prefix and url_prefix != api_view.url_prefix:\n            api_view.paths = {url_prefix + k.removeprefix(api_view.url_prefix): v for k, v in api_view.paths.items()}\n        elif url_prefix and not api_view.url_prefix:\n            api_view.paths = {url_prefix.rstrip(\"/\") + \"/\" + k.lstrip(\"/\"): v for k, v in api_view.paths.items()}\n        self.paths.update(**api_view.paths)\n\n        # Update component schemas with the APIView's component schemas\n        self.components_schemas.update(**api_view.components_schemas)\n\n        # Register the APIView with the current instance\n        api_view.register(self, url_prefix=url_prefix, view_kwargs=view_kwargs)\n\n    def _add_url_rule(\n            self,\n            rule,\n            endpoint=None,\n            view_func=None,\n            provide_automatic_options=None,\n            **options,\n    ) -&gt; None:\n        self.add_url_rule(rule, endpoint, view_func, provide_automatic_options, **options)\n\n    def _collect_openapi_info(\n            self,\n            rule: str,\n            func: Callable,\n            *,\n            tags: Optional[list[Tag]] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            external_docs: Optional[ExternalDocumentation] = None,\n            operation_id: Optional[str] = None,\n            responses: Optional[ResponseDict] = None,\n            deprecated: Optional[bool] = None,\n            security: Optional[list[dict[str, list[Any]]]] = None,\n            servers: Optional[list[Server]] = None,\n            openapi_extensions: Optional[dict[str, Any]] = None,\n            doc_ui: bool = True,\n            method: str = HTTPMethod.GET\n    ) -&gt; ParametersTuple:\n        \"\"\"\n        Collects OpenAPI specification information for Flask routes and view functions.\n\n        Args:\n            rule: Flask route.\n            func: Flask view_func.\n            tags: Adds metadata to a single tag.\n            summary: A short summary of what the operation does.\n            description: A verbose explanation of the operation behavior.\n            external_docs: Additional external documentation for this operation.\n            operation_id: Unique string used to identify the operation.\n            responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n            deprecated: Declares this operation to be deprecated.\n            security: A declaration of which security mechanisms can be used for this operation.\n            servers: An alternative server array to service this operation.\n            openapi_extensions: Allows extensions to the OpenAPI Schema.\n            doc_ui: Declares this operation to be shown. Default to True.\n            method: HTTP method for the operation. Defaults to GET.\n        \"\"\"\n        if doc_ui is True:\n            # Convert key to string\n            new_responses = convert_responses_key_to_string(responses or {})\n\n            # Global response: combine API responses\n            combine_responses = {**self.responses, **new_responses}\n\n            # Create operation\n            operation = get_operation(\n                func,\n                summary=summary,\n                description=description,\n                openapi_extensions=openapi_extensions\n            )\n            # Set external docs\n            if external_docs:\n                operation.externalDocs = external_docs\n\n            # Unique string used to identify the operation.\n            operation.operationId = operation_id or self.operation_id_callback(\n                name=func.__name__, path=rule, method=method\n            )\n\n            # Only set `deprecated` if True, otherwise leave it as None\n            if deprecated is not None:\n                operation.deprecated = deprecated\n\n            # Add security\n            if security:\n                operation.security = security\n\n            # Add servers\n            if servers:\n                operation.servers = servers\n\n            # Store tags\n            parse_and_store_tags(tags or [], self.tags, self.tag_names, operation)\n\n            # Parse response\n            get_responses(combine_responses, self.components_schemas, operation)\n\n            # Convert a route parameter format from /pet/&lt;petId&gt; to /pet/{petId}\n            uri = re.sub(r\"&lt;([^&lt;:]+:)?\", \"{\", rule).replace(\"&gt;\", \"}\")\n\n            # Parse method\n            parse_method(uri, method, self.paths, operation)\n\n            # Parse parameters\n            return parse_parameters(func, components_schemas=self.components_schemas, operation=operation)\n        else:\n            return parse_parameters(func, doc_ui=False)\n</code></pre>"},{"location":"Reference/OpenAPI/#flask_openapi3.OpenAPI.api_doc","title":"<code>api_doc</code>  <code>property</code>","text":"<p>Generate the OpenAPI specification JSON.</p> <p>Returns:</p> Type Description <code>dict</code> <p>The OpenAPI specification JSON as a dictionary.</p>"},{"location":"Reference/OpenAPI/#flask_openapi3.OpenAPI.__init__","title":"<code>__init__(import_name, *, info=None, security_schemes=None, responses=None, servers=None, external_docs=None, operation_id_callback=get_operation_id_for_path, openapi_extensions=None, validation_error_status=422, validation_error_model=ValidationErrorModel, validation_error_callback=make_validation_error_response, doc_ui=True, doc_prefix='/openapi', doc_url='/openapi.json', **kwargs)</code>","text":"<p>OpenAPI class that provides REST API functionality along with Swagger UI and Redoc.</p> <p>Parameters:</p> Name Type Description Default <code>import_name</code> <code>str</code> <p>The import name for the Flask application.</p> required <code>info</code> <code>Optional[Info]</code> <p>Information about the API (title, version, etc.). See https://spec.openapis.org/oas/v3.1.0#info-object.</p> <code>None</code> <code>security_schemes</code> <code>Optional[SecuritySchemesDict]</code> <p>Security schemes for the API. See https://spec.openapis.org/oas/v3.1.0#security-scheme-object.</p> <code>None</code> <code>responses</code> <code>Optional[ResponseDict]</code> <p>API responses should be either a subclass of BaseModel, a dictionary, or None.</p> <code>None</code> <code>servers</code> <code>Optional[list[Server]]</code> <p>An array of Server objects providing connectivity information to a target server.</p> <code>None</code> <code>external_docs</code> <code>Optional[ExternalDocumentation]</code> <p>External documentation for the API. See: https://spec.openapis.org/oas/v3.1.0#external-documentation-object.</p> <code>None</code> <code>operation_id_callback</code> <code>Callable</code> <p>Callback function for custom operation ID generation. Receives name (str), path (str), and method (str) parameters. Defaults to <code>get_operation_id_for_path</code> from utils.</p> <code>get_operation_id_for_path</code> <code>openapi_extensions</code> <code>Optional[dict[str, Any]]</code> <p>Extensions to the OpenAPI Schema. See https://spec.openapis.org/oas/v3.1.0#specification-extensions.</p> <code>None</code> <code>validation_error_status</code> <code>Union[str, int]</code> <p>HTTP Status of the response given when a validation error is detected by pydantic. Defaults to 422.</p> <code>422</code> <code>validation_error_model</code> <code>Type[BaseModel]</code> <p>Validation error response model for OpenAPI Specification.</p> <code>ValidationErrorModel</code> <code>validation_error_callback</code> <code>Callable</code> <p>Validation error response callback, the return format corresponds to the validation_error_model.</p> <code>make_validation_error_response</code> <code>doc_ui</code> <code>bool</code> <p>Enable OpenAPI document UI (Swagger UI and Redoc). Defaults to True.</p> <code>True</code> <code>doc_prefix</code> <code>str</code> <p>URL prefix used for OpenAPI document and UI. Defaults to \"/openapi\".</p> <code>'/openapi'</code> <code>doc_url</code> <code>str</code> <p>URL for accessing the OpenAPI specification document in JSON format. Defaults to \"/openapi.json\".</p> <code>'/openapi.json'</code> <code>**kwargs</code> <code>Any</code> <p>Additional kwargs to be passed to Flask.</p> <code>{}</code> Source code in <code>flask_openapi3/openapi.py</code> <pre><code>def __init__(\n        self,\n        import_name: str,\n        *,\n        info: Optional[Info] = None,\n        security_schemes: Optional[SecuritySchemesDict] = None,\n        responses: Optional[ResponseDict] = None,\n        servers: Optional[list[Server]] = None,\n        external_docs: Optional[ExternalDocumentation] = None,\n        operation_id_callback: Callable = get_operation_id_for_path,\n        openapi_extensions: Optional[dict[str, Any]] = None,\n        validation_error_status: Union[str, int] = 422,\n        validation_error_model: Type[BaseModel] = ValidationErrorModel,\n        validation_error_callback: Callable = make_validation_error_response,\n        doc_ui: bool = True,\n        doc_prefix: str = \"/openapi\",\n        doc_url: str = \"/openapi.json\",\n        **kwargs: Any\n) -&gt; None:\n    \"\"\"\n    OpenAPI class that provides REST API functionality along with Swagger UI and Redoc.\n\n    Args:\n        import_name: The import name for the Flask application.\n        info: Information about the API (title, version, etc.).\n            See https://spec.openapis.org/oas/v3.1.0#info-object.\n        security_schemes: Security schemes for the API.\n            See https://spec.openapis.org/oas/v3.1.0#security-scheme-object.\n        responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n        servers: An array of Server objects providing connectivity information to a target server.\n        external_docs: External documentation for the API.\n            See: https://spec.openapis.org/oas/v3.1.0#external-documentation-object.\n        operation_id_callback: Callback function for custom operation ID generation.\n            Receives name (str), path (str), and method (str) parameters.\n            Defaults to `get_operation_id_for_path` from utils.\n        openapi_extensions: Extensions to the OpenAPI Schema.\n            See https://spec.openapis.org/oas/v3.1.0#specification-extensions.\n        validation_error_status:\n            HTTP Status of the response given when a validation error is detected by pydantic.\n            Defaults to 422.\n        validation_error_model: Validation error response model for OpenAPI Specification.\n        validation_error_callback: Validation error response callback, the return format corresponds to\n            the validation_error_model.\n        doc_ui: Enable OpenAPI document UI (Swagger UI and Redoc).\n            Defaults to True.\n        doc_prefix: URL prefix used for OpenAPI document and UI.\n            Defaults to \"/openapi\".\n        doc_url: URL for accessing the OpenAPI specification document in JSON format.\n            Defaults to \"/openapi.json\".\n        **kwargs: Additional kwargs to be passed to Flask.\n    \"\"\"\n    super(OpenAPI, self).__init__(import_name, **kwargs)\n\n    # Set OpenAPI version and API information\n    self.openapi_version = \"3.1.0\"\n    self.info = info or Info(title=\"OpenAPI\", version=\"1.0.0\")\n\n    # Set security schemes, responses, paths and components\n    self.security_schemes = security_schemes\n\n    # Convert key to string\n    self.responses = convert_responses_key_to_string(responses or {})\n\n    # Initialize instance variables\n    self.paths: dict = dict()\n    self.components_schemas: dict = dict()\n    self.components = Components()\n\n    # Initialize lists for tags and tag names\n    self.tags: list[Tag] = []\n    self.tag_names: list[str] = []\n\n    # Set URL prefixes and endpoints\n    self.doc_prefix = doc_prefix\n    self.doc_url = doc_url\n\n    # Set servers and external documentation\n    self.severs = servers\n    self.external_docs = external_docs\n\n    # Set the operation ID callback function\n    self.operation_id_callback: Callable = operation_id_callback\n\n    # Set OpenAPI extensions\n    self.openapi_extensions = openapi_extensions or {}\n\n    # Set HTTP Response of validation errors within OpenAPI\n    self.validation_error_status = str(validation_error_status)\n    self.validation_error_model = validation_error_model\n    self.validation_error_callback = validation_error_callback\n\n    # Initialize the OpenAPI documentation UI\n    if doc_ui:\n        self._init_doc()\n\n    # Add the OpenAPI command\n    self.cli.add_command(openapi_command)  # type: ignore\n\n    # Initialize specification JSON\n    self.spec_json: dict = {}\n    self.spec = APISpec(\n        openapi=self.openapi_version,\n        info=self.info,\n        paths=self.paths\n    )\n</code></pre>"},{"location":"Reference/OpenAPI/#flask_openapi3.OpenAPI.register_api","title":"<code>register_api(api, **options)</code>","text":"<p>Register an APIBlueprint.</p> <p>Parameters:</p> Name Type Description Default <code>api</code> <code>APIBlueprint</code> <p>The APIBlueprint instance to register.</p> required <code>options</code> <code>Any</code> <p>Additional keyword arguments are passed to :class:<code>~flask.blueprints.BlueprintSetupState</code>.</p> <code>{}</code> <code>They</code> <code>can be accessed in </code> <p>meth:<code>~flask.Blueprint.record</code> callbacks.</p> required Source code in <code>flask_openapi3/openapi.py</code> <pre><code>def register_api(self, api: APIBlueprint, **options: Any) -&gt; None:\n    \"\"\"\n    Register an APIBlueprint.\n\n    Args:\n        api: The APIBlueprint instance to register.\n\n        options: Additional keyword arguments are passed to :class:`~flask.blueprints.BlueprintSetupState`.\n        They can be accessed in :meth:`~flask.Blueprint.record` callbacks.\n        url_prefix, Blueprint routes will be prefixed with this.\n        subdomain, Blueprint routes will match on this subdomain.\n        url_defaults, Blueprint routes will use these default values for view arguments.\n\n    \"\"\"\n    for tag in api.tags:\n        if tag.name not in self.tag_names:\n            # Append tag to the list of tags\n            self.tags.append(tag)\n\n            # Append tag name to the list of tag names\n            self.tag_names.append(tag.name)\n\n    # Update paths with the APIBlueprint's paths\n    url_prefix = options.get(\"url_prefix\")\n    if url_prefix and api.url_prefix and url_prefix != api.url_prefix:\n        api.paths = {url_prefix + k.removeprefix(api.url_prefix): v for k, v in api.paths.items()}\n    elif url_prefix and not api.url_prefix:\n        api.paths = {url_prefix.rstrip(\"/\") + \"/\" + k.lstrip(\"/\"): v for k, v in api.paths.items()}\n    self.paths.update(**api.paths)\n\n    # Update component schemas with the APIBlueprint's component schemas\n    self.components_schemas.update(**api.components_schemas)\n\n    # Register the APIBlueprint with the current instance\n    self.register_blueprint(api, **options)\n</code></pre>"},{"location":"Reference/OpenAPI/#flask_openapi3.OpenAPI.register_api_view","title":"<code>register_api_view(api_view, url_prefix=None, view_kwargs=None)</code>","text":"<p>Register APIView</p> <p>Parameters:</p> Name Type Description Default <code>api_view</code> <code>APIView</code> <p>The APIView instance to register.</p> required <code>url_prefix</code> <code>Optional[str]</code> <p>A path to prepend to all the APIView's urls</p> <code>None</code> <code>view_kwargs</code> <code>Optional[dict[Any, Any]]</code> <p>Additional keyword arguments to pass to the API views.</p> <code>None</code> Source code in <code>flask_openapi3/openapi.py</code> <pre><code>def register_api_view(\n        self,\n        api_view: APIView,\n        url_prefix: Optional[str] = None,\n        view_kwargs: Optional[dict[Any, Any]] = None\n) -&gt; None:\n    \"\"\"\n    Register APIView\n\n    Args:\n        api_view: The APIView instance to register.\n        url_prefix: A path to prepend to all the APIView's urls\n        view_kwargs: Additional keyword arguments to pass to the API views.\n    \"\"\"\n    if view_kwargs is None:\n        view_kwargs = {}\n\n    # Iterate through tags of the APIView\n    for tag in api_view.tags:\n        if tag.name not in self.tag_names:\n            # Append tag to the list of tags\n            self.tags.append(tag)\n\n            # Append tag name to the list of tag names\n            self.tag_names.append(tag.name)\n\n    # Update paths with the APIView's paths\n    if url_prefix and api_view.url_prefix and url_prefix != api_view.url_prefix:\n        api_view.paths = {url_prefix + k.removeprefix(api_view.url_prefix): v for k, v in api_view.paths.items()}\n    elif url_prefix and not api_view.url_prefix:\n        api_view.paths = {url_prefix.rstrip(\"/\") + \"/\" + k.lstrip(\"/\"): v for k, v in api_view.paths.items()}\n    self.paths.update(**api_view.paths)\n\n    # Update component schemas with the APIView's component schemas\n    self.components_schemas.update(**api_view.components_schemas)\n\n    # Register the APIView with the current instance\n    api_view.register(self, url_prefix=url_prefix, view_kwargs=view_kwargs)\n</code></pre>"},{"location":"Reference/Scaffold/","title":"APIScaffold","text":""},{"location":"Reference/Scaffold/#flask_openapi3.scaffold.APIScaffold","title":"<code>APIScaffold</code>","text":"Source code in <code>flask_openapi3/scaffold.py</code> <pre><code>class APIScaffold:\n    def _collect_openapi_info(\n            self,\n            rule: str,\n            func: Callable,\n            *,\n            tags: Optional[list[Tag]] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            external_docs: Optional[ExternalDocumentation] = None,\n            operation_id: Optional[str] = None,\n            responses: Optional[ResponseDict] = None,\n            deprecated: Optional[bool] = None,\n            security: Optional[list[dict[str, list[Any]]]] = None,\n            servers: Optional[list[Server]] = None,\n            openapi_extensions: Optional[dict[str, Any]] = None,\n            doc_ui: bool = True,\n            method: str = HTTPMethod.GET\n    ) -&gt; ParametersTuple:\n        raise NotImplementedError  # pragma: no cover\n\n    def register_api(self, api) -&gt; None:\n        raise NotImplementedError  # pragma: no cover\n\n    def _add_url_rule(\n            self,\n            rule,\n            endpoint=None,\n            view_func=None,\n            provide_automatic_options=None,\n            **options,\n    ) -&gt; None:\n        raise NotImplementedError  # pragma: no cover\n\n    @staticmethod\n    def create_view_func(\n            func,\n            header,\n            cookie,\n            path,\n            query,\n            form,\n            body,\n            raw,\n            view_class=None,\n            view_kwargs=None\n    ):\n        is_coroutine_function = inspect.iscoroutinefunction(func)\n        if is_coroutine_function:\n            @wraps(func)\n            async def view_func(**kwargs) -&gt; FlaskResponse:\n                if hasattr(func, \"__delay_validate_request__\") and func.__delay_validate_request__ is True:\n                    func_kwargs = kwargs\n                else:\n                    func_kwargs = _validate_request(\n                        header=header,\n                        cookie=cookie,\n                        path=path,\n                        query=query,\n                        form=form,\n                        body=body,\n                        raw=raw,\n                        path_kwargs=kwargs\n                    )\n\n                # handle async request\n                if view_class:\n                    signature = inspect.signature(view_class.__init__)\n                    parameters = signature.parameters\n                    if parameters.get(\"view_kwargs\"):\n                        view_object = view_class(view_kwargs=view_kwargs)\n                    else:\n                        view_object = view_class()\n                    response = await func(view_object, **func_kwargs)\n                else:\n                    response = await func(**func_kwargs)\n                return response\n        else:\n            @wraps(func)\n            def view_func(**kwargs) -&gt; FlaskResponse:\n                if hasattr(func, \"__delay_validate_request__\") and func.__delay_validate_request__ is True:\n                    func_kwargs = kwargs\n                else:\n                    func_kwargs = _validate_request(\n                        header=header,\n                        cookie=cookie,\n                        path=path,\n                        query=query,\n                        form=form,\n                        body=body,\n                        raw=raw,\n                        path_kwargs=kwargs\n                    )\n\n                # handle request\n                if view_class:\n                    signature = inspect.signature(view_class.__init__)\n                    parameters = signature.parameters\n                    if parameters.get(\"view_kwargs\"):\n                        view_object = view_class(view_kwargs=view_kwargs)\n                    else:\n                        view_object = view_class()\n                    response = func(view_object, **func_kwargs)\n                else:\n                    response = func(**func_kwargs)\n                return response\n\n        if not hasattr(func, \"view\"):\n            func.view = view_func\n\n        return func.view\n\n    def get(\n            self,\n            rule: str,\n            *,\n            tags: Optional[list[Tag]] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            external_docs: Optional[ExternalDocumentation] = None,\n            operation_id: Optional[str] = None,\n            responses: Optional[ResponseDict] = None,\n            deprecated: Optional[bool] = None,\n            security: Optional[list[dict[str, list[Any]]]] = None,\n            servers: Optional[list[Server]] = None,\n            openapi_extensions: Optional[dict[str, Any]] = None,\n            doc_ui: bool = True,\n            **options: Any\n    ) -&gt; Callable:\n        \"\"\"\n        Decorator for defining a REST API endpoint with the HTTP GET method.\n        More information goto https://spec.openapis.org/oas/v3.1.0#operation-object\n\n        Args:\n            rule: The URL rule string.\n            tags: Adds metadata to a single tag.\n            summary: A short summary of what the operation does.\n            description: A verbose explanation of the operation behavior.\n            external_docs: Additional external documentation for this operation.\n            operation_id: Unique string used to identify the operation.\n            responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n            deprecated: Declares this operation to be deprecated.\n            security: A declaration of which security mechanisms can be used for this operation.\n            servers: An alternative server array to service this operation.\n            openapi_extensions: Allows extensions to the OpenAPI Schema.\n            doc_ui: Declares this operation to be shown. Default to True.\n        \"\"\"\n\n        def decorator(func) -&gt; Callable:\n            header, cookie, path, query, form, body, raw = \\\n                self._collect_openapi_info(\n                    rule,\n                    func,\n                    tags=tags,\n                    summary=summary,\n                    description=description,\n                    external_docs=external_docs,\n                    operation_id=operation_id,\n                    responses=responses,\n                    deprecated=deprecated,\n                    security=security,\n                    servers=servers,\n                    openapi_extensions=openapi_extensions,\n                    doc_ui=doc_ui,\n                    method=HTTPMethod.GET\n                )\n\n            view_func = self.create_view_func(func, header, cookie, path, query, form, body, raw)\n            options.update({\"methods\": [HTTPMethod.GET]})\n            self._add_url_rule(rule, view_func=view_func, **options)\n\n            return func\n\n        return decorator\n\n    def post(\n            self,\n            rule: str,\n            *,\n            tags: Optional[list[Tag]] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            external_docs: Optional[ExternalDocumentation] = None,\n            operation_id: Optional[str] = None,\n            responses: Optional[ResponseDict] = None,\n            deprecated: Optional[bool] = None,\n            security: Optional[list[dict[str, list[Any]]]] = None,\n            servers: Optional[list[Server]] = None,\n            openapi_extensions: Optional[dict[str, Any]] = None,\n            doc_ui: bool = True,\n            **options: Any\n    ) -&gt; Callable:\n        \"\"\"\n        Decorator for defining a REST API endpoint with the HTTP POST method.\n        More information goto https://spec.openapis.org/oas/v3.1.0#operation-object\n\n        Args:\n            rule: The URL rule string.\n            tags: Adds metadata to a single tag.\n            summary: A short summary of what the operation does.\n            description: A verbose explanation of the operation behavior.\n            external_docs: Additional external documentation for this operation.\n            operation_id: Unique string used to identify the operation.\n            responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n            deprecated: Declares this operation to be deprecated.\n            security: A declaration of which security mechanisms can be used for this operation.\n            servers: An alternative server array to service this operation.\n            openapi_extensions: Allows extensions to the OpenAPI Schema.\n            doc_ui: Declares this operation to be shown. Default to True.\n        \"\"\"\n\n        def decorator(func) -&gt; Callable:\n            header, cookie, path, query, form, body, raw = \\\n                self._collect_openapi_info(\n                    rule,\n                    func,\n                    tags=tags,\n                    summary=summary,\n                    description=description,\n                    external_docs=external_docs,\n                    operation_id=operation_id,\n                    responses=responses,\n                    deprecated=deprecated,\n                    security=security,\n                    servers=servers,\n                    openapi_extensions=openapi_extensions,\n                    doc_ui=doc_ui,\n                    method=HTTPMethod.POST\n                )\n\n            view_func = self.create_view_func(func, header, cookie, path, query, form, body, raw)\n            options.update({\"methods\": [HTTPMethod.POST]})\n            self._add_url_rule(rule, view_func=view_func, **options)\n\n            return func\n\n        return decorator\n\n    def put(\n            self,\n            rule: str,\n            *,\n            tags: Optional[list[Tag]] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            external_docs: Optional[ExternalDocumentation] = None,\n            operation_id: Optional[str] = None,\n            responses: Optional[ResponseDict] = None,\n            deprecated: Optional[bool] = None,\n            security: Optional[list[dict[str, list[Any]]]] = None,\n            servers: Optional[list[Server]] = None,\n            openapi_extensions: Optional[dict[str, Any]] = None,\n            doc_ui: bool = True,\n            **options: Any\n    ) -&gt; Callable:\n        \"\"\"\n        Decorator for defining a REST API endpoint with the HTTP PUT method.\n        More information goto https://spec.openapis.org/oas/v3.1.0#operation-object\n\n        Args:\n            rule: The URL rule string.\n            tags: Adds metadata to a single tag.\n            summary: A short summary of what the operation does.\n            description: A verbose explanation of the operation behavior.\n            external_docs: Additional external documentation for this operation.\n            operation_id: Unique string used to identify the operation.\n            responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n            deprecated: Declares this operation to be deprecated.\n            security: A declaration of which security mechanisms can be used for this operation.\n            servers: An alternative server array to service this operation.\n            openapi_extensions: Allows extensions to the OpenAPI Schema.\n            doc_ui: Declares this operation to be shown. Default to True.\n        \"\"\"\n\n        def decorator(func) -&gt; Callable:\n            header, cookie, path, query, form, body, raw = \\\n                self._collect_openapi_info(\n                    rule,\n                    func,\n                    tags=tags,\n                    summary=summary,\n                    description=description,\n                    external_docs=external_docs,\n                    operation_id=operation_id,\n                    responses=responses,\n                    deprecated=deprecated,\n                    security=security,\n                    servers=servers,\n                    openapi_extensions=openapi_extensions,\n                    doc_ui=doc_ui,\n                    method=HTTPMethod.PUT\n                )\n\n            view_func = self.create_view_func(func, header, cookie, path, query, form, body, raw)\n            options.update({\"methods\": [HTTPMethod.PUT]})\n            self._add_url_rule(rule, view_func=view_func, **options)\n\n            return func\n\n        return decorator\n\n    def delete(\n            self,\n            rule: str,\n            *,\n            tags: Optional[list[Tag]] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            external_docs: Optional[ExternalDocumentation] = None,\n            operation_id: Optional[str] = None,\n            responses: Optional[ResponseDict] = None,\n            deprecated: Optional[bool] = None,\n            security: Optional[list[dict[str, list[Any]]]] = None,\n            servers: Optional[list[Server]] = None,\n            openapi_extensions: Optional[dict[str, Any]] = None,\n            doc_ui: bool = True,\n            **options: Any\n    ) -&gt; Callable:\n        \"\"\"\n        Decorator for defining a REST API endpoint with the HTTP DELETE method.\n        More information goto https://spec.openapis.org/oas/v3.1.0#operation-object\n\n        Args:\n            rule: The URL rule string.\n            tags: Adds metadata to a single tag.\n            summary: A short summary of what the operation does.\n            description: A verbose explanation of the operation behavior.\n            external_docs: Additional external documentation for this operation.\n            operation_id: Unique string used to identify the operation.\n            responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n            deprecated: Declares this operation to be deprecated.\n            security: A declaration of which security mechanisms can be used for this operation.\n            servers: An alternative server array to service this operation.\n            openapi_extensions: Allows extensions to the OpenAPI Schema.\n            doc_ui: Declares this operation to be shown. Default to True.\n        \"\"\"\n\n        def decorator(func) -&gt; Callable:\n            header, cookie, path, query, form, body, raw = \\\n                self._collect_openapi_info(\n                    rule,\n                    func,\n                    tags=tags,\n                    summary=summary,\n                    description=description,\n                    external_docs=external_docs,\n                    operation_id=operation_id,\n                    responses=responses,\n                    deprecated=deprecated,\n                    security=security,\n                    servers=servers,\n                    openapi_extensions=openapi_extensions,\n                    doc_ui=doc_ui,\n                    method=HTTPMethod.DELETE\n                )\n\n            view_func = self.create_view_func(func, header, cookie, path, query, form, body, raw)\n            options.update({\"methods\": [HTTPMethod.DELETE]})\n            self._add_url_rule(rule, view_func=view_func, **options)\n\n            return func\n\n        return decorator\n\n    def patch(\n            self,\n            rule: str,\n            *,\n            tags: Optional[list[Tag]] = None,\n            summary: Optional[str] = None,\n            description: Optional[str] = None,\n            external_docs: Optional[ExternalDocumentation] = None,\n            operation_id: Optional[str] = None,\n            responses: Optional[ResponseDict] = None,\n            deprecated: Optional[bool] = None,\n            security: Optional[list[dict[str, list[Any]]]] = None,\n            servers: Optional[list[Server]] = None,\n            openapi_extensions: Optional[dict[str, Any]] = None,\n            doc_ui: bool = True,\n            **options: Any\n    ) -&gt; Callable:\n        \"\"\"\n        Decorator for defining a REST API endpoint with the HTTP PATCH method.\n        More information goto https://spec.openapis.org/oas/v3.1.0#operation-object\n\n        Args:\n            rule: The URL rule string.\n            tags: Adds metadata to a single tag.\n            summary: A short summary of what the operation does.\n            description: A verbose explanation of the operation behavior.\n            external_docs: Additional external documentation for this operation.\n            operation_id: Unique string used to identify the operation.\n            responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n            deprecated: Declares this operation to be deprecated.\n            security: A declaration of which security mechanisms can be used for this operation.\n            servers: An alternative server array to service this operation.\n            openapi_extensions: Allows extensions to the OpenAPI Schema.\n            doc_ui: Declares this operation to be shown. Default to True.\n        \"\"\"\n\n        def decorator(func) -&gt; Callable:\n            header, cookie, path, query, form, body, raw = \\\n                self._collect_openapi_info(\n                    rule,\n                    func,\n                    tags=tags,\n                    summary=summary,\n                    description=description,\n                    external_docs=external_docs,\n                    operation_id=operation_id,\n                    responses=responses,\n                    deprecated=deprecated,\n                    security=security,\n                    servers=servers,\n                    openapi_extensions=openapi_extensions,\n                    doc_ui=doc_ui,\n                    method=HTTPMethod.PATCH\n                )\n\n            view_func = self.create_view_func(func, header, cookie, path, query, form, body, raw)\n            options.update({\"methods\": [HTTPMethod.PATCH]})\n            self._add_url_rule(rule, view_func=view_func, **options)\n\n            return func\n\n        return decorator\n</code></pre>"},{"location":"Reference/Scaffold/#flask_openapi3.scaffold.APIScaffold.delete","title":"<code>delete(rule, *, tags=None, summary=None, description=None, external_docs=None, operation_id=None, responses=None, deprecated=None, security=None, servers=None, openapi_extensions=None, doc_ui=True, **options)</code>","text":"<p>Decorator for defining a REST API endpoint with the HTTP DELETE method. More information goto https://spec.openapis.org/oas/v3.1.0#operation-object</p> <p>Parameters:</p> Name Type Description Default <code>rule</code> <code>str</code> <p>The URL rule string.</p> required <code>tags</code> <code>Optional[list[Tag]]</code> <p>Adds metadata to a single tag.</p> <code>None</code> <code>summary</code> <code>Optional[str]</code> <p>A short summary of what the operation does.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>A verbose explanation of the operation behavior.</p> <code>None</code> <code>external_docs</code> <code>Optional[ExternalDocumentation]</code> <p>Additional external documentation for this operation.</p> <code>None</code> <code>operation_id</code> <code>Optional[str]</code> <p>Unique string used to identify the operation.</p> <code>None</code> <code>responses</code> <code>Optional[ResponseDict]</code> <p>API responses should be either a subclass of BaseModel, a dictionary, or None.</p> <code>None</code> <code>deprecated</code> <code>Optional[bool]</code> <p>Declares this operation to be deprecated.</p> <code>None</code> <code>security</code> <code>Optional[list[dict[str, list[Any]]]]</code> <p>A declaration of which security mechanisms can be used for this operation.</p> <code>None</code> <code>servers</code> <code>Optional[list[Server]]</code> <p>An alternative server array to service this operation.</p> <code>None</code> <code>openapi_extensions</code> <code>Optional[dict[str, Any]]</code> <p>Allows extensions to the OpenAPI Schema.</p> <code>None</code> <code>doc_ui</code> <code>bool</code> <p>Declares this operation to be shown. Default to True.</p> <code>True</code> Source code in <code>flask_openapi3/scaffold.py</code> <pre><code>def delete(\n        self,\n        rule: str,\n        *,\n        tags: Optional[list[Tag]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        external_docs: Optional[ExternalDocumentation] = None,\n        operation_id: Optional[str] = None,\n        responses: Optional[ResponseDict] = None,\n        deprecated: Optional[bool] = None,\n        security: Optional[list[dict[str, list[Any]]]] = None,\n        servers: Optional[list[Server]] = None,\n        openapi_extensions: Optional[dict[str, Any]] = None,\n        doc_ui: bool = True,\n        **options: Any\n) -&gt; Callable:\n    \"\"\"\n    Decorator for defining a REST API endpoint with the HTTP DELETE method.\n    More information goto https://spec.openapis.org/oas/v3.1.0#operation-object\n\n    Args:\n        rule: The URL rule string.\n        tags: Adds metadata to a single tag.\n        summary: A short summary of what the operation does.\n        description: A verbose explanation of the operation behavior.\n        external_docs: Additional external documentation for this operation.\n        operation_id: Unique string used to identify the operation.\n        responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n        deprecated: Declares this operation to be deprecated.\n        security: A declaration of which security mechanisms can be used for this operation.\n        servers: An alternative server array to service this operation.\n        openapi_extensions: Allows extensions to the OpenAPI Schema.\n        doc_ui: Declares this operation to be shown. Default to True.\n    \"\"\"\n\n    def decorator(func) -&gt; Callable:\n        header, cookie, path, query, form, body, raw = \\\n            self._collect_openapi_info(\n                rule,\n                func,\n                tags=tags,\n                summary=summary,\n                description=description,\n                external_docs=external_docs,\n                operation_id=operation_id,\n                responses=responses,\n                deprecated=deprecated,\n                security=security,\n                servers=servers,\n                openapi_extensions=openapi_extensions,\n                doc_ui=doc_ui,\n                method=HTTPMethod.DELETE\n            )\n\n        view_func = self.create_view_func(func, header, cookie, path, query, form, body, raw)\n        options.update({\"methods\": [HTTPMethod.DELETE]})\n        self._add_url_rule(rule, view_func=view_func, **options)\n\n        return func\n\n    return decorator\n</code></pre>"},{"location":"Reference/Scaffold/#flask_openapi3.scaffold.APIScaffold.get","title":"<code>get(rule, *, tags=None, summary=None, description=None, external_docs=None, operation_id=None, responses=None, deprecated=None, security=None, servers=None, openapi_extensions=None, doc_ui=True, **options)</code>","text":"<p>Decorator for defining a REST API endpoint with the HTTP GET method. More information goto https://spec.openapis.org/oas/v3.1.0#operation-object</p> <p>Parameters:</p> Name Type Description Default <code>rule</code> <code>str</code> <p>The URL rule string.</p> required <code>tags</code> <code>Optional[list[Tag]]</code> <p>Adds metadata to a single tag.</p> <code>None</code> <code>summary</code> <code>Optional[str]</code> <p>A short summary of what the operation does.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>A verbose explanation of the operation behavior.</p> <code>None</code> <code>external_docs</code> <code>Optional[ExternalDocumentation]</code> <p>Additional external documentation for this operation.</p> <code>None</code> <code>operation_id</code> <code>Optional[str]</code> <p>Unique string used to identify the operation.</p> <code>None</code> <code>responses</code> <code>Optional[ResponseDict]</code> <p>API responses should be either a subclass of BaseModel, a dictionary, or None.</p> <code>None</code> <code>deprecated</code> <code>Optional[bool]</code> <p>Declares this operation to be deprecated.</p> <code>None</code> <code>security</code> <code>Optional[list[dict[str, list[Any]]]]</code> <p>A declaration of which security mechanisms can be used for this operation.</p> <code>None</code> <code>servers</code> <code>Optional[list[Server]]</code> <p>An alternative server array to service this operation.</p> <code>None</code> <code>openapi_extensions</code> <code>Optional[dict[str, Any]]</code> <p>Allows extensions to the OpenAPI Schema.</p> <code>None</code> <code>doc_ui</code> <code>bool</code> <p>Declares this operation to be shown. Default to True.</p> <code>True</code> Source code in <code>flask_openapi3/scaffold.py</code> <pre><code>def get(\n        self,\n        rule: str,\n        *,\n        tags: Optional[list[Tag]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        external_docs: Optional[ExternalDocumentation] = None,\n        operation_id: Optional[str] = None,\n        responses: Optional[ResponseDict] = None,\n        deprecated: Optional[bool] = None,\n        security: Optional[list[dict[str, list[Any]]]] = None,\n        servers: Optional[list[Server]] = None,\n        openapi_extensions: Optional[dict[str, Any]] = None,\n        doc_ui: bool = True,\n        **options: Any\n) -&gt; Callable:\n    \"\"\"\n    Decorator for defining a REST API endpoint with the HTTP GET method.\n    More information goto https://spec.openapis.org/oas/v3.1.0#operation-object\n\n    Args:\n        rule: The URL rule string.\n        tags: Adds metadata to a single tag.\n        summary: A short summary of what the operation does.\n        description: A verbose explanation of the operation behavior.\n        external_docs: Additional external documentation for this operation.\n        operation_id: Unique string used to identify the operation.\n        responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n        deprecated: Declares this operation to be deprecated.\n        security: A declaration of which security mechanisms can be used for this operation.\n        servers: An alternative server array to service this operation.\n        openapi_extensions: Allows extensions to the OpenAPI Schema.\n        doc_ui: Declares this operation to be shown. Default to True.\n    \"\"\"\n\n    def decorator(func) -&gt; Callable:\n        header, cookie, path, query, form, body, raw = \\\n            self._collect_openapi_info(\n                rule,\n                func,\n                tags=tags,\n                summary=summary,\n                description=description,\n                external_docs=external_docs,\n                operation_id=operation_id,\n                responses=responses,\n                deprecated=deprecated,\n                security=security,\n                servers=servers,\n                openapi_extensions=openapi_extensions,\n                doc_ui=doc_ui,\n                method=HTTPMethod.GET\n            )\n\n        view_func = self.create_view_func(func, header, cookie, path, query, form, body, raw)\n        options.update({\"methods\": [HTTPMethod.GET]})\n        self._add_url_rule(rule, view_func=view_func, **options)\n\n        return func\n\n    return decorator\n</code></pre>"},{"location":"Reference/Scaffold/#flask_openapi3.scaffold.APIScaffold.patch","title":"<code>patch(rule, *, tags=None, summary=None, description=None, external_docs=None, operation_id=None, responses=None, deprecated=None, security=None, servers=None, openapi_extensions=None, doc_ui=True, **options)</code>","text":"<p>Decorator for defining a REST API endpoint with the HTTP PATCH method. More information goto https://spec.openapis.org/oas/v3.1.0#operation-object</p> <p>Parameters:</p> Name Type Description Default <code>rule</code> <code>str</code> <p>The URL rule string.</p> required <code>tags</code> <code>Optional[list[Tag]]</code> <p>Adds metadata to a single tag.</p> <code>None</code> <code>summary</code> <code>Optional[str]</code> <p>A short summary of what the operation does.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>A verbose explanation of the operation behavior.</p> <code>None</code> <code>external_docs</code> <code>Optional[ExternalDocumentation]</code> <p>Additional external documentation for this operation.</p> <code>None</code> <code>operation_id</code> <code>Optional[str]</code> <p>Unique string used to identify the operation.</p> <code>None</code> <code>responses</code> <code>Optional[ResponseDict]</code> <p>API responses should be either a subclass of BaseModel, a dictionary, or None.</p> <code>None</code> <code>deprecated</code> <code>Optional[bool]</code> <p>Declares this operation to be deprecated.</p> <code>None</code> <code>security</code> <code>Optional[list[dict[str, list[Any]]]]</code> <p>A declaration of which security mechanisms can be used for this operation.</p> <code>None</code> <code>servers</code> <code>Optional[list[Server]]</code> <p>An alternative server array to service this operation.</p> <code>None</code> <code>openapi_extensions</code> <code>Optional[dict[str, Any]]</code> <p>Allows extensions to the OpenAPI Schema.</p> <code>None</code> <code>doc_ui</code> <code>bool</code> <p>Declares this operation to be shown. Default to True.</p> <code>True</code> Source code in <code>flask_openapi3/scaffold.py</code> <pre><code>def patch(\n        self,\n        rule: str,\n        *,\n        tags: Optional[list[Tag]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        external_docs: Optional[ExternalDocumentation] = None,\n        operation_id: Optional[str] = None,\n        responses: Optional[ResponseDict] = None,\n        deprecated: Optional[bool] = None,\n        security: Optional[list[dict[str, list[Any]]]] = None,\n        servers: Optional[list[Server]] = None,\n        openapi_extensions: Optional[dict[str, Any]] = None,\n        doc_ui: bool = True,\n        **options: Any\n) -&gt; Callable:\n    \"\"\"\n    Decorator for defining a REST API endpoint with the HTTP PATCH method.\n    More information goto https://spec.openapis.org/oas/v3.1.0#operation-object\n\n    Args:\n        rule: The URL rule string.\n        tags: Adds metadata to a single tag.\n        summary: A short summary of what the operation does.\n        description: A verbose explanation of the operation behavior.\n        external_docs: Additional external documentation for this operation.\n        operation_id: Unique string used to identify the operation.\n        responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n        deprecated: Declares this operation to be deprecated.\n        security: A declaration of which security mechanisms can be used for this operation.\n        servers: An alternative server array to service this operation.\n        openapi_extensions: Allows extensions to the OpenAPI Schema.\n        doc_ui: Declares this operation to be shown. Default to True.\n    \"\"\"\n\n    def decorator(func) -&gt; Callable:\n        header, cookie, path, query, form, body, raw = \\\n            self._collect_openapi_info(\n                rule,\n                func,\n                tags=tags,\n                summary=summary,\n                description=description,\n                external_docs=external_docs,\n                operation_id=operation_id,\n                responses=responses,\n                deprecated=deprecated,\n                security=security,\n                servers=servers,\n                openapi_extensions=openapi_extensions,\n                doc_ui=doc_ui,\n                method=HTTPMethod.PATCH\n            )\n\n        view_func = self.create_view_func(func, header, cookie, path, query, form, body, raw)\n        options.update({\"methods\": [HTTPMethod.PATCH]})\n        self._add_url_rule(rule, view_func=view_func, **options)\n\n        return func\n\n    return decorator\n</code></pre>"},{"location":"Reference/Scaffold/#flask_openapi3.scaffold.APIScaffold.post","title":"<code>post(rule, *, tags=None, summary=None, description=None, external_docs=None, operation_id=None, responses=None, deprecated=None, security=None, servers=None, openapi_extensions=None, doc_ui=True, **options)</code>","text":"<p>Decorator for defining a REST API endpoint with the HTTP POST method. More information goto https://spec.openapis.org/oas/v3.1.0#operation-object</p> <p>Parameters:</p> Name Type Description Default <code>rule</code> <code>str</code> <p>The URL rule string.</p> required <code>tags</code> <code>Optional[list[Tag]]</code> <p>Adds metadata to a single tag.</p> <code>None</code> <code>summary</code> <code>Optional[str]</code> <p>A short summary of what the operation does.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>A verbose explanation of the operation behavior.</p> <code>None</code> <code>external_docs</code> <code>Optional[ExternalDocumentation]</code> <p>Additional external documentation for this operation.</p> <code>None</code> <code>operation_id</code> <code>Optional[str]</code> <p>Unique string used to identify the operation.</p> <code>None</code> <code>responses</code> <code>Optional[ResponseDict]</code> <p>API responses should be either a subclass of BaseModel, a dictionary, or None.</p> <code>None</code> <code>deprecated</code> <code>Optional[bool]</code> <p>Declares this operation to be deprecated.</p> <code>None</code> <code>security</code> <code>Optional[list[dict[str, list[Any]]]]</code> <p>A declaration of which security mechanisms can be used for this operation.</p> <code>None</code> <code>servers</code> <code>Optional[list[Server]]</code> <p>An alternative server array to service this operation.</p> <code>None</code> <code>openapi_extensions</code> <code>Optional[dict[str, Any]]</code> <p>Allows extensions to the OpenAPI Schema.</p> <code>None</code> <code>doc_ui</code> <code>bool</code> <p>Declares this operation to be shown. Default to True.</p> <code>True</code> Source code in <code>flask_openapi3/scaffold.py</code> <pre><code>def post(\n        self,\n        rule: str,\n        *,\n        tags: Optional[list[Tag]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        external_docs: Optional[ExternalDocumentation] = None,\n        operation_id: Optional[str] = None,\n        responses: Optional[ResponseDict] = None,\n        deprecated: Optional[bool] = None,\n        security: Optional[list[dict[str, list[Any]]]] = None,\n        servers: Optional[list[Server]] = None,\n        openapi_extensions: Optional[dict[str, Any]] = None,\n        doc_ui: bool = True,\n        **options: Any\n) -&gt; Callable:\n    \"\"\"\n    Decorator for defining a REST API endpoint with the HTTP POST method.\n    More information goto https://spec.openapis.org/oas/v3.1.0#operation-object\n\n    Args:\n        rule: The URL rule string.\n        tags: Adds metadata to a single tag.\n        summary: A short summary of what the operation does.\n        description: A verbose explanation of the operation behavior.\n        external_docs: Additional external documentation for this operation.\n        operation_id: Unique string used to identify the operation.\n        responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n        deprecated: Declares this operation to be deprecated.\n        security: A declaration of which security mechanisms can be used for this operation.\n        servers: An alternative server array to service this operation.\n        openapi_extensions: Allows extensions to the OpenAPI Schema.\n        doc_ui: Declares this operation to be shown. Default to True.\n    \"\"\"\n\n    def decorator(func) -&gt; Callable:\n        header, cookie, path, query, form, body, raw = \\\n            self._collect_openapi_info(\n                rule,\n                func,\n                tags=tags,\n                summary=summary,\n                description=description,\n                external_docs=external_docs,\n                operation_id=operation_id,\n                responses=responses,\n                deprecated=deprecated,\n                security=security,\n                servers=servers,\n                openapi_extensions=openapi_extensions,\n                doc_ui=doc_ui,\n                method=HTTPMethod.POST\n            )\n\n        view_func = self.create_view_func(func, header, cookie, path, query, form, body, raw)\n        options.update({\"methods\": [HTTPMethod.POST]})\n        self._add_url_rule(rule, view_func=view_func, **options)\n\n        return func\n\n    return decorator\n</code></pre>"},{"location":"Reference/Scaffold/#flask_openapi3.scaffold.APIScaffold.put","title":"<code>put(rule, *, tags=None, summary=None, description=None, external_docs=None, operation_id=None, responses=None, deprecated=None, security=None, servers=None, openapi_extensions=None, doc_ui=True, **options)</code>","text":"<p>Decorator for defining a REST API endpoint with the HTTP PUT method. More information goto https://spec.openapis.org/oas/v3.1.0#operation-object</p> <p>Parameters:</p> Name Type Description Default <code>rule</code> <code>str</code> <p>The URL rule string.</p> required <code>tags</code> <code>Optional[list[Tag]]</code> <p>Adds metadata to a single tag.</p> <code>None</code> <code>summary</code> <code>Optional[str]</code> <p>A short summary of what the operation does.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>A verbose explanation of the operation behavior.</p> <code>None</code> <code>external_docs</code> <code>Optional[ExternalDocumentation]</code> <p>Additional external documentation for this operation.</p> <code>None</code> <code>operation_id</code> <code>Optional[str]</code> <p>Unique string used to identify the operation.</p> <code>None</code> <code>responses</code> <code>Optional[ResponseDict]</code> <p>API responses should be either a subclass of BaseModel, a dictionary, or None.</p> <code>None</code> <code>deprecated</code> <code>Optional[bool]</code> <p>Declares this operation to be deprecated.</p> <code>None</code> <code>security</code> <code>Optional[list[dict[str, list[Any]]]]</code> <p>A declaration of which security mechanisms can be used for this operation.</p> <code>None</code> <code>servers</code> <code>Optional[list[Server]]</code> <p>An alternative server array to service this operation.</p> <code>None</code> <code>openapi_extensions</code> <code>Optional[dict[str, Any]]</code> <p>Allows extensions to the OpenAPI Schema.</p> <code>None</code> <code>doc_ui</code> <code>bool</code> <p>Declares this operation to be shown. Default to True.</p> <code>True</code> Source code in <code>flask_openapi3/scaffold.py</code> <pre><code>def put(\n        self,\n        rule: str,\n        *,\n        tags: Optional[list[Tag]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        external_docs: Optional[ExternalDocumentation] = None,\n        operation_id: Optional[str] = None,\n        responses: Optional[ResponseDict] = None,\n        deprecated: Optional[bool] = None,\n        security: Optional[list[dict[str, list[Any]]]] = None,\n        servers: Optional[list[Server]] = None,\n        openapi_extensions: Optional[dict[str, Any]] = None,\n        doc_ui: bool = True,\n        **options: Any\n) -&gt; Callable:\n    \"\"\"\n    Decorator for defining a REST API endpoint with the HTTP PUT method.\n    More information goto https://spec.openapis.org/oas/v3.1.0#operation-object\n\n    Args:\n        rule: The URL rule string.\n        tags: Adds metadata to a single tag.\n        summary: A short summary of what the operation does.\n        description: A verbose explanation of the operation behavior.\n        external_docs: Additional external documentation for this operation.\n        operation_id: Unique string used to identify the operation.\n        responses: API responses should be either a subclass of BaseModel, a dictionary, or None.\n        deprecated: Declares this operation to be deprecated.\n        security: A declaration of which security mechanisms can be used for this operation.\n        servers: An alternative server array to service this operation.\n        openapi_extensions: Allows extensions to the OpenAPI Schema.\n        doc_ui: Declares this operation to be shown. Default to True.\n    \"\"\"\n\n    def decorator(func) -&gt; Callable:\n        header, cookie, path, query, form, body, raw = \\\n            self._collect_openapi_info(\n                rule,\n                func,\n                tags=tags,\n                summary=summary,\n                description=description,\n                external_docs=external_docs,\n                operation_id=operation_id,\n                responses=responses,\n                deprecated=deprecated,\n                security=security,\n                servers=servers,\n                openapi_extensions=openapi_extensions,\n                doc_ui=doc_ui,\n                method=HTTPMethod.PUT\n            )\n\n        view_func = self.create_view_func(func, header, cookie, path, query, form, body, raw)\n        options.update({\"methods\": [HTTPMethod.PUT]})\n        self._add_url_rule(rule, view_func=view_func, **options)\n\n        return func\n\n    return decorator\n</code></pre>"},{"location":"Usage/Configuration/","title":"Configuration","text":"<p>Flask supports many configurations, and there are also some configurations in this library that can be used.</p>"},{"location":"Usage/Configuration/#swagger_html_string","title":"SWAGGER_HTML_STRING","text":"<p>You can customize the custom behavior of this template.</p> <p>The default <code>SWAGGER_HTML_STRING</code> is here.</p>"},{"location":"Usage/Configuration/#swagger_config","title":"SWAGGER_CONFIG","text":"<p>You can change the default behavior of the Swagger UI.</p> <pre><code>from flask_openapi3 import OpenAPI\n\napp = OpenAPI(__name__)\n\napp.config[\"SWAGGER_CONFIG\"] = {\n    \"docExpansion\": \"none\",\n    \"validatorUrl\": \"https://www.b.com\"\n}\n</code></pre> <p>More configuration options for Swagger UI.</p>"},{"location":"Usage/Configuration/#oauth_config","title":"OAUTH_CONFIG","text":"<p>You can configure OAuth 2.0 authorization for Swagger UI.</p> <pre><code>from flask_openapi3 import OpenAPI\n\napp = OpenAPI(__name__)\n\napp.config[\"OAUTH_CONFIG\"] = {\"clientId\": \"xxx\", \"clientSecret\": \"xxx\"}\n</code></pre> <p>More configuration options for Swagger UI.</p>"},{"location":"Usage/Configuration/#scalar_html_string","title":"SCALAR_HTML_STRING","text":"<p>You can customize the custom behavior of this template.</p> <p>The default <code>SCALAR_HTML_STRING</code> is here.</p>"},{"location":"Usage/Configuration/#scalar_config","title":"SCALAR_CONFIG","text":"<p>You can change the default behavior of the Scalar UI.</p> <p>More configuration options for Swagger UI.</p>"},{"location":"Usage/Configuration/#redoc_html_string","title":"REDOC_HTML_STRING","text":"<p>You can customize the custom behavior of this template.</p> <p>The default <code>REDOC_HTML_STRING</code> is here.</p>"},{"location":"Usage/Configuration/#redoc_config","title":"REDOC_CONFIG","text":"<p>You can change the default behavior of the Redoc UI.</p> <p>More configuration options for Redoc UI.</p>"},{"location":"Usage/Configuration/#rapidoc_html_string","title":"RAPIDOC_HTML_STRING","text":"<p>You can customize the custom behavior of this template.</p> <p>The default <code>RAPIDOC_HTML_STRING</code> is here.</p>"},{"location":"Usage/Configuration/#rapidoc_config","title":"RAPIDOC_CONFIG","text":"<p>You can change the default behavior of the Rapidoc UI.</p> <p>More configuration options for Rapidoc UI.</p>"},{"location":"Usage/Configuration/#rapipdf_html_string","title":"RAPIPDF_HTML_STRING","text":"<p>You can customize the custom behavior of this template.</p> <p>The default <code>RAPIPDF_HTML_STRING</code> is here.</p>"},{"location":"Usage/Configuration/#rapipdf_config","title":"RAPIPDF_CONFIG","text":"<p>You can change the default behavior of the Rapipdf UI.</p> <p>More configuration options for Rapipdf UI.</p>"},{"location":"Usage/Configuration/#elements_html_string","title":"ELEMENTS_HTML_STRING","text":"<p>You can customize the custom behavior of this template.</p> <p>The default <code>ELEMENTS_HTML_STRING</code> is here.</p>"},{"location":"Usage/Configuration/#elements_config","title":"ELEMENTS_CONFIG","text":"<p>You can change the default behavior of the Elements UI.</p> <p>More configuration options for Rapipdf UI.</p>"},{"location":"Usage/JSON/","title":"JSON","text":""},{"location":"Usage/JSON/#use-orjson","title":"Use <code>orjson</code>","text":"<pre><code>import orjson\nfrom flask.json.provider import JSONProvider\n\n\nclass OrJSONProvider(JSONProvider):\n    # https://github.com/ijl/orjson#option\n    option = orjson.OPT_INDENT_2\n\n    def dumps(self, obj, **kwargs):\n        return orjson.dumps(obj, option=self.option).decode()\n\n    def loads(self, s, **kwargs):\n        return orjson.loads(s)\n\napp = OpenAPI(__name__, info=info)\n# use orjson\norjson_provider = OrJSONProvider(app)\napp.json = orjson_provider\n</code></pre>"},{"location":"Usage/JSON/#use-ujson","title":"Use <code>ujson</code>","text":"<pre><code>import ujson\nfrom flask.json.provider import JSONProvider\n\nclass UJSONProvider(JSONProvider):\n    # https://github.com/ultrajson/ultrajson\n    encode_html_chars = False\n    ensure_ascii = False\n    indent = 4\n\n    def dumps(self, obj, **kwargs):\n        option = {\n            \"encode_html_chars\": self.encode_html_chars,\n            \"ensure_ascii\": self.ensure_ascii,\n            \"indent\": self.indent\n        }\n        return ujson.dumps(obj, **option)\n\n    def loads(self, s, **kwargs):\n        return ujson.loads(s)\n\n\napp = OpenAPI(__name__, info=info)\n# use ujson\nujson_provider = UJSONProvider(app)\napp.json = ujson_provider\n</code></pre>"},{"location":"Usage/Model_Config/","title":"Model Config","text":"<p>The BaseModel in Pydantic  supports some custom configurations(Model Config),  so we can use the <code>openapi_extra</code> to extend OpenAPI Specification.</p>"},{"location":"Usage/Model_Config/#openapi_extra","title":"openapi_extra","text":"<p>The <code>openapi_extra</code> will be merged with the automatically generated OpenAPI schema.</p>"},{"location":"Usage/Model_Config/#form","title":"form","text":"<pre><code>class UploadFilesForm(BaseModel):\n    file: FileStorage\n    str_list: List[str]\n\n    model_config = dict(\n        openapi_extra={\n            # \"example\": {\"a\": 123},\n            \"examples\": {\n                \"Example 01\": {\n                    \"summary\": \"An example\",\n                    \"value\": {\n                        \"file\": \"Example-01.jpg\",\n                        \"str_list\": [\"a\", \"b\", \"c\"]\n                    }\n                },\n                \"Example 02\": {\n                    \"summary\": \"Another example\",\n                    \"value\": {\n                        \"str_list\": [\"1\", \"2\", \"3\"]\n                    }\n                }\n            }\n        }\n    )\n</code></pre> <p>Effect in Redoc:</p> <p></p>"},{"location":"Usage/Model_Config/#body","title":"body","text":"<pre><code>class BookBody(BaseModel):\n    age: int\n    author: str\n\n    model_config = dict(\n        openapi_extra={\n            \"description\": \"This is post RequestBody\",\n            \"example\": {\"age\": 12, \"author\": \"author1\"},\n            \"examples\": {\n                \"example1\": {\n                    \"summary\": \"example summary1\",\n                    \"description\": \"example description1\",\n                    \"value\": {\n                        \"age\": 24,\n                        \"author\": \"author2\"\n                    }\n                },\n                \"example2\": {\n                    \"summary\": \"example summary2\",\n                    \"description\": \"example description2\",\n                    \"value\": {\n                        \"age\": 48,\n                        \"author\": \"author3\"\n                    }\n                }\n\n            }}\n    )\n</code></pre> <p>Effect in swagger:</p> <p></p> <p>You can use <code>reqiured</code> in <code>openapi_extra</code> to mark the RequestBody as Optional.</p> <pre><code>class PingBody(BaseModel):\n        ping: Optional[str] = Field(\"ok\", description=\"String to return, 'ok' when null.\")\n\n        model_config = dict(\n            openapi_extra = {\n                \"required\": False\n            }\n        )\n</code></pre>"},{"location":"Usage/Model_Config/#responses","title":"responses","text":"<pre><code>class MessageResponse(BaseModel):\n    message: str = Field(..., description=\"The message\")\n\n    model_config = dict(\n        openapi_extra={\n            # \"example\": {\"message\": \"aaa\"},\n            \"examples\": {\n                \"example1\": {\n                    \"summary\": \"example1 summary\",\n                    \"value\": {\n                        \"message\": \"bbb\"\n                    }\n                },\n                \"example2\": {\n                    \"summary\": \"example2 summary\",\n                    \"value\": {\n                        \"message\": \"ccc\"\n                    }\n                }\n            }\n        }\n    )\n</code></pre> <p>Effect in swagger:</p> <p></p>"},{"location":"Usage/Model_Config/#by_alias","title":"by_alias","text":"<p>Sometimes you may not want to use aliases (such as in the responses model). In that case, <code>by_alias</code> will be convenient:</p> <pre><code>class MessageResponse(BaseModel):\n    message: str = Field(..., description=\"The message\")\n    metadata: dict[str, str] = Field(alias=\"metadata_\")\n\n    model_config = dict(\n        by_alias=False\n    )\n</code></pre>"},{"location":"Usage/Request/","title":"Request","text":""},{"location":"Usage/Request/#request-declaration","title":"Request declaration","text":"<p>First, you need to import <code>BaseModel</code> from <code>pydantic</code>:</p> <pre><code>from pydantic import BaseModel\n</code></pre>"},{"location":"Usage/Request/#path","title":"path","text":"<p>Request parameter in rules\uff0c<code>@app.get('/book/&lt;int:bid&gt;')</code>.</p> <p>You have to declare path model as a class that inherits from  <code>BaseModel</code>:</p> <pre><code>class BookPath(BaseModel):\n    bid: int = Field(..., description='book id')\n\n\n@app.get('/book/&lt;int:bid&gt;', tags=[book_tag], security=security)\ndef get_book(path: BookPath):\n    ...\n</code></pre>"},{"location":"Usage/Request/#query","title":"query","text":"<p>Receive flask <code>request.args</code>.</p> <p>Info</p> <pre><code>from flask import request\n</code></pre> <p>like path, you need pass <code>query</code> to view function.</p> <pre><code>class BookQuery(BaseModel):\n    age: Optional[int] = Field(..., ge=2, le=4, description='Age')\n    author: str = Field(None, min_length=2, max_length=4, description='Author')\n\n\n@app.get('/book/&lt;int:bid&gt;', tags=[book_tag], security=security)\ndef get_book(path: BookPath, query: BookQuery):\n    ...\n</code></pre>"},{"location":"Usage/Request/#form","title":"form","text":"<p>Receive flask <code>request.form</code> and <code>request.files</code>.</p> <pre><code>class UploadFileForm(BaseModel):\n    file: FileStorage  # request.files[\"file\"]\n    file_type: str = Field(None, description=\"File type\")\n\n\n@app.post('/upload')\ndef upload_file(form: UploadFileForm):\n    ...\n</code></pre>"},{"location":"Usage/Request/#body","title":"body","text":"<p>Receive flask <code>request.json</code>.</p> <pre><code>class BookBody(BaseModel):\n    age: Optional[int] = Field(..., ge=2, le=4, description='Age')\n    author: str = Field(None, min_length=2, max_length=4, description='Author')\n\n\n@app.post('/book', tags=[book_tag])\ndef create_book(body: BookBody):\n    ...\n</code></pre>"},{"location":"Usage/Request/#header","title":"header","text":"<p>Receive flask <code>request.headers</code>.</p>"},{"location":"Usage/Request/#cookie","title":"cookie","text":"<p>Receive flask <code>request.cookies</code>.</p>"},{"location":"Usage/Request/#raw","title":"raw","text":"<p>Receive flask <code>request</code> and no data validation.</p> <pre><code>from flask_openapi3 import RawModel\n\n\nclass BookRaw(RawModel):\n    mimetypes = [\"text/csv\", \"application/json\"]\n\n\n@app.post(\"/book\")\ndef get_book(raw: BookRaw):\n    # raw equals to flask.request\n    print(raw.data)\n    print(raw.mimetype)\n    return \"ok\"\n</code></pre>"},{"location":"Usage/Request/#validate_request","title":"@validate_request","text":"<p>Sometimes you want to delay the verification request parameters, such as after login verification:</p> <pre><code>from flask_openapi3 import validate_request\n\n\ndef login_required(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        print(\"login_required ...\")\n        return func(*args, **kwargs)\n\n    return wrapper\n\n\n@app.get(\"/book\")\n@login_required\n@validate_request()\ndef get_book(query: BookQuery):\n    ...\n</code></pre>"},{"location":"Usage/Request/#request-model","title":"Request model","text":"<p>First, you need to define a pydantic model:</p> <pre><code>class BookQuery(BaseModel):\n    age: int = Field(..., ge=2, le=4, description='Age')\n    author: str = Field(None, description='Author')\n</code></pre> <p>More information to see BaseModel, and you can Customize the Field.</p> <p>However, you can also use Field to extend Parameter Object. Here is an example:</p> <p><code>age</code> with <code>example</code> and <code>author</code> with <code>deprecated</code>.</p> <pre><code>class BookQuery(BaseModel):\n    age: int = Field(..., ge=2, le=4, description='Age', json_schema_extra={\"example\": 3})\n    author: str = Field(None, description='Author', json_schema_extra={\"deprecated\": True})\n</code></pre> <p>Magic:</p> <p></p> <p>More available fields to see Parameter Object Fixed Fields.</p>"},{"location":"Usage/Response/","title":"Response","text":""},{"location":"Usage/Response/#responses","title":"responses","text":"<p>If you want to generate Schemas, pass the <code>responses</code>.</p> <pre><code>class BookBodyWithID(BaseModel):\n    bid: int = Field(..., description='book id')\n    age: Optional[int] = Field(None, ge=2, le=4, description='Age')\n    author: str = Field(None, min_length=2, max_length=4, description='Author')\n\n\nclass BookResponse(BaseModel):\n    code: int = Field(0, description=\"status code\")\n    message: str = Field(\"ok\", description=\"exception information\")\n    data: BookBodyWithID\n\n\n@app.get('/book/&lt;int:bid&gt;', \n         tags=[book_tag], \n         responses={\n             200: BookResponse, \n             # Version 2.4.0 starts supporting response for dictionary types\n             201: {\"content\": {\"text/csv\": {\"schema\": {\"type\": \"string\"}}}}\n         })\ndef get_book(path: BookPath, query: BookBody):\n    \"\"\"get a book\n    get book by id, age or author\n    \"\"\"\n    return {\"code\": 0, \"message\": \"ok\", \"data\": {}}\n</code></pre> <p>Now you can use <code>string</code>, <code>int</code>, and <code>HTTPStatus</code> as response's key.</p> <pre><code>from http import HTTPStatus\n\n\nclass BookResponse(BaseModel):\n    message: str = Field(..., description=\"The message\")\n\n\n@api.get(\"/hello/&lt;string:name&gt;\",\n        responses={\n            HTTPStatus.OK: BookResponse, \n            \"201\": {\"content\": {\"text/csv\": {\"schema\": {\"type\": \"string\"}}}},\n            204: None\n        })\ndef hello(path: HelloPath):\n    message = {\"message\": f\"\"\"Hello {path.name}!\"\"\"}\n\n    response = make_response(json.dumps(message), HTTPStatus.OK)\n    response.mimetype = \"application/json\"\n    return response\n</code></pre> <p></p>"},{"location":"Usage/Response/#more-information-about-openapi-responses","title":"More information about OpenAPI responses","text":"<ul> <li>OpenAPI Responses Object, it includes the Response Object.</li> <li>OpenAPI Response Object.</li> </ul>"},{"location":"Usage/Route_Operation/","title":"Route Operation","text":""},{"location":"Usage/Route_Operation/#tags","title":"tags","text":"<p>You can also specify tag for apis like this:</p> <pre><code>from flask_openapi3 import Tag\n\nbook_tag = Tag(name='book', description='Some Book')\n\n\n@api.get('/book', tags=[book_tag])\ndef get_book():\n    ...\n</code></pre> <p>and then you will get the magic.</p> <p></p>"},{"location":"Usage/Route_Operation/#abp_tags-view_tags","title":"abp_tags &amp; view_tags","text":"<p>You don't need to specify tags for every api.</p> <pre><code>tag = Tag(name='book', description=\"Some Book\")\n\napi = APIBlueprint('/book', __name__, url_prefix='/api', abp_tags=[tag])\napi_view = APIView('/book', __name__, url_prefix='/api', view_tags=[tag])\n\n\n@api.post('/book')\ndef create_book(body: BookBody):\n    ...\n</code></pre>"},{"location":"Usage/Route_Operation/#summary-and-description","title":"summary and description","text":"<p>You need to add docs to the view-func. The first line is the summary, and the rest is the description. Like this:</p> <pre><code>@app.get('/book/&lt;int:bid&gt;', tags=[book_tag], responses={200: BookResponse}, security=security)\ndef get_book(path: BookPath, query: BookBody):\n    \"\"\"Get book\n    Get some book by id, like:\n    http://localhost:5000/book/3\n    \"\"\"\n    return {\"code\": 0, \"message\": \"ok\", \"data\": {\"bid\": path.bid, \"age\": query.age, \"author\": query.author}}\n</code></pre> <p></p> <p>Now keyword parameters <code>summary</code> and <code>description</code> is supported, it will be take first.</p> <pre><code>@app.get('/book/&lt;int:bid&gt;', summary=\"new summary\", description='new description')\ndef get_book(path: BookPath, query: BookBody):\n    \"\"\"Get book\n    Get some book by id, like:\n    http://localhost:5000/book/3\n    \"\"\"\n    return {\"code\": 0, \"message\": \"ok\", \"data\": {}}\n</code></pre> <p></p>"},{"location":"Usage/Route_Operation/#external_docs","title":"external_docs","text":"<p>Allows referencing an external resource for extended documentation.</p> <p>More information to see External Documentation Object.</p> <pre><code>from flask_openapi3 import OpenAPI, ExternalDocumentation\n\napp = OpenAPI(__name__, info=info)\n\n@app.get(\n    '/book/&lt;int:bid&gt;',\n    tags=[book_tag],\n    summary='new summary',\n    description='new description',\n    external_docs=ExternalDocumentation(\n        url=\"https://www.openapis.org/\",\n        description=\"Something great got better, get excited!\")\n)\ndef get_book(path: BookPath):\n    ...\n</code></pre>"},{"location":"Usage/Route_Operation/#operation_id","title":"operation_id","text":"<p>You can set <code>operation_id</code> for an api (operation). The default is automatically.</p> <pre><code>@app.get(\n    '/book/&lt;int:bid&gt;',\n    tags=[book_tag],\n    summary='new summary',\n    description='new description',\n    operation_id=\"get_book_id\"\n)\ndef get_book(path: BookPath):\n    ...\n</code></pre>"},{"location":"Usage/Route_Operation/#operation_id_callback","title":"operation_id_callback","text":"<p>You can set a custom callback to automatically set <code>operation_id</code> for an api (operation). Just add a <code>operation_id_callback</code> param to the constructor of  <code>OpenAPI</code> or <code>APIBlueprint</code> or <code>APIView</code>. The example shows setting the default <code>operation_id</code> to be the function name, in this case <code>create_book</code>.</p> <pre><code>def get_operation_id_for_path(*, bp_name: str = None, name: str, path: str, method: str) -&gt; str:\n    return name\n\napi = APIBlueprint('book', __name__, url_prefix='/api', operation_id_callback=get_operation_id_for_path)\n\n@api.post('/book/')\ndef create_book(body: BookBody):\n    ...\n</code></pre>"},{"location":"Usage/Route_Operation/#deprecated","title":"deprecated","text":"<p><code>deprecated</code>: mark as deprecated support. default to not True.</p> <pre><code>@app.get('/book', deprecated=True)\ndef get_books(query: BookQuery):\n    ...\n</code></pre>"},{"location":"Usage/Route_Operation/#security","title":"security","text":"<p>pass the security to your api, like this:</p> <pre><code>@app.get('/book/&lt;int:bid&gt;', tags=[book_tag], security=security)\ndef get_book(path: Path, query: BookBody):\n    ...\n</code></pre> <p>There are many kinds of security supported here:</p> <pre><code># Basic Authentication Sample\nbasic = {\n  \"type\": \"http\",\n  \"scheme\": \"basic\"\n}\n# JWT Bearer Sample\njwt = {\n  \"type\": \"http\",\n  \"scheme\": \"bearer\",\n  \"bearerFormat\": \"JWT\"\n}\n# API Key Sample\napi_key = {\n  \"type\": \"apiKey\",\n  \"name\": \"api_key\",\n  \"in\": \"header\"\n}\n# Implicit OAuth2 Sample\noauth2 = {\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\nsecurity_schemes = {\"jwt\": jwt, \"api_key\": api_key, \"oauth2\": oauth2, \"basic\": basic}\n\napp = OpenAPI(__name__, info=info, security_schemes=security_schemes)\n\nsecurity = [\n    {\"jwt\": []},\n    {\"oauth2\": [\"write:pets\", \"read:pets\"]},\n    {\"basic\": []}\n]\n\n@app.get(\n    '/book/&lt;int:bid&gt;',\n    tags=[book_tag],\n    summary='new summary',\n    description='new description',\n    security=security\n)\ndef get_book(path: BookPath):\n    ...\n</code></pre>"},{"location":"Usage/Route_Operation/#abp_security-view_security","title":"abp_security &amp; view_security","text":"<p>You don't need to specify security for every api.</p> <pre><code>tag = Tag(name='book', description=\"Some Book\")\nsecurity = [{\"jwt\": []}]\napi = APIBlueprint('/book', __name__, abp_tags=[tag], abp_security=security)\napi_view = APIView('/book', __name__, abp_tags=[tag], view_security=security)\n\n\n@api.post('/book')\ndef create_book(body: BookBody):\n    ...\n</code></pre>"},{"location":"Usage/Route_Operation/#servers","title":"servers","text":"<p>An array of Server Objects, which provide connectivity information to a target server. If the server's property is not provided, or is an empty array, the default value would be a Server Object with an url value of /.</p> <pre><code>from flask_openapi3 import OpenAPI, Server\n\napp = OpenAPI(__name__, info=info)\n\n@app.get(\n    '/book/&lt;int:bid&gt;',\n    tags=[book_tag],\n    summary='new summary',\n    description='new description',\n    servers=[Server(url=\"https://www.openapis.org/\", description=\"openapi\")]\n)\ndef get_book(path: BookPath):\n    ...\n</code></pre>"},{"location":"Usage/Route_Operation/#openapi_extensions","title":"openapi_extensions","text":"<p>While the OpenAPI Specification tries to accommodate most use cases, additional data can be added to extend the specification at certain points. See Specification Extensions.</p> <pre><code>from flask_openapi3 import OpenAPI, APIBlueprint, APIView\n\napp = OpenAPI(__name__, openapi_extensions={\n    \"x-google-endpoints\": [\n        {\n            \"name\": \"my-cool-api.endpoints.my-project-id.cloud.goog\",\n            \"allowCors\": True\n        }\n    ]\n})\n\nopenapi_extensions = {\n    \"x-google-backend\": {\n        \"address\": \"https://&lt;NODE_SERVICE_ID&gt;-&lt;HASH&gt;.a.run.app\",\n        \"protocol\": \"h2\"\n    }\n}\n\n@app.get(\"/\", openapi_extensions=openapi_extensions)\ndef hello():\n    return \"ok\"\n\n\n# APIBlueprint\napi = APIBlueprint(\"book\", __name__, url_prefix=\"/api\")\n\n\n@api.get('/book', openapi_extensions=openapi_extensions)\ndef get_book():\n    return {\"code\": 0, \"message\": \"ok\"}\n\n\napp.register_api(api)\n\n# APIView\napi_view = APIView()\n\n\n@api_view.route(\"/view/book\")\nclass BookListAPIView:\n\n    @api_view.doc(openapi_extensions=openapi_extensions)\n    def post(self):\n        return \"ok\"\n\n\napp.register_api_view(api_view)\n</code></pre>"},{"location":"Usage/Route_Operation/#doc_ui","title":"doc_ui","text":"<p>You can pass <code>doc_ui=False</code> to disable the <code>OpenAPI spec</code> when init <code>OpenAPI</code>.</p> <pre><code>app = OpenAPI(__name__, info=info, doc_ui=False)\n</code></pre> <p>You can also use <code>doc_ui</code> in endpoint or when initializing <code>APIBlueprint</code>.</p> <pre><code>api = APIBlueprint(\n    '/book',\n    __name__,\n    doc_ui=False\n)\n\n# or\n\n@api.get('/book', doc_ui=False)\ndef get_book():\n    ...\n</code></pre>"},{"location":"Usage/Specification/","title":"Specification","text":""},{"location":"Usage/Specification/#specification","title":"Specification","text":"<p>If you need the complete Specification, go to http://127.0.0.1:5000/openapi/openapi.json</p>"},{"location":"Usage/Specification/#command-flask-openapi","title":"command: flask openapi","text":"<p>The <code>flask openapi</code> command will export the OpenAPI Specification to console when you execute the command.</p> <p><pre><code>flask --app IMPORT openapi\n</code></pre> where <code>IMPORT</code> is the Flask application, in our case an OpenAPI application, to loan. For example, if your OpenAPI application is <code>app</code> defined in <code>hello.py</code>,  as in the example in Quickstart, the command is <code>flask --app hello:app openapi</code>. (For more information about the command line interface of Flask, please check out  the Flask CLI documentation.)</p> <p>Execute <code>flask --app IMPORT openapi --help</code> for more information about the command:</p> <p>Again, assuming your OpenAPI application is <code>app</code> defined in <code>hello.py</code>,</p> <pre><code>flask --app hello:app openapi --help\n\nUsage: flask openapi [OPTIONS]\n\n  Export the OpenAPI Specification to console or a file\n\nOptions:\n  -o, --output PATH               The output file path.\n  -f, --format [json|yaml]\n                                  The output file format.\n  -i, --indent INTEGER            The indentation for JSON dumps.\n  --help                          Show this message and exit.\n</code></pre> <p>Please note, by default, the command will export the OpenAPI specification in JSON. If you want the OpenAPI specification in YAML, by running the command with the <code>-f yaml</code> option, you need to install the <code>pyyaml</code> package. <pre><code>pip install flask-openapi3[yaml]\n\n# or\npip install pyyaml\n</code></pre></p>"},{"location":"Usage/Specification/#info","title":"info","text":"<p><code>flask-openapi3</code> provide Swagger UI, Redoc and RapiDoc interactive documentation. Before that, you should know something about the OpenAPI Specification.</p> <p>You must import <code>Info</code> from <code>flask-openapi3</code>, it needs some parameters: <code>title</code>, <code>version</code>... , more information sees the OpenAPI Specification Info Object.</p> <pre><code>from flask_openapi3 import Info\nfrom flask_openapi3 import OpenAPI, APIBlueprint\n\ninfo = Info(title='book API', version='1.0.0')\napp = OpenAPI(__name__, info=info)\napi = APIBlueprint('/book', __name__, url_prefix='/api')\n\nif __name__ == '__main__':\n    app.run()\n</code></pre> <p>run it, and go to http://127.0.0.1:5000/openapi, you will see the documentation.</p> <p> </p>"},{"location":"Usage/Specification/#security_schemes","title":"security_schemes","text":"<p>There are some examples for Security Scheme Object, more features see the OpenAPI Specification Security Scheme Object.</p> <pre><code># Basic Authentication Sample\nbasic = {\n  \"type\": \"http\",\n  \"scheme\": \"basic\"\n}\n# JWT Bearer Sample\njwt = {\n  \"type\": \"http\",\n  \"scheme\": \"bearer\",\n  \"bearerFormat\": \"JWT\"\n}\n# API Key Sample\napi_key = {\n  \"type\": \"apiKey\",\n  \"name\": \"api_key\",\n  \"in\": \"header\"\n}\n# Implicit OAuth2 Sample\noauth2 = {\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\nsecurity_schemes = {\"jwt\": jwt, \"api_key\": api_key, \"oauth2\": oauth2, \"basic\": basic}\n</code></pre> <p>First, you need to define the security_schemes and security variable:</p> <pre><code>jwt = {\n    \"type\": \"http\",\n    \"scheme\": \"bearer\",\n    \"bearerFormat\": \"JWT\"\n}\nsecurity_schemes = {\"jwt\": jwt}\n\nsecurity = [{\"jwt\": []}]\n\napp = OpenAPI(__name__, info=info, security_schemes=security_schemes)\n</code></pre> <p>Second, add pass the security to your api, like this:</p> <pre><code>@app.get('/book/&lt;int:bid&gt;', tags=[book_tag], security=security)\ndef get_book(path: Path, query: BookBody):\n    ...\n</code></pre> <p>result:</p> <p></p>"},{"location":"Usage/Specification/#responses","title":"responses","text":"<p>You can add <code>responses</code> for each API under the <code>app</code> wrapper.</p> <pre><code>app = OpenAPI(\n    __name__, \n    info=info, \n    responses={404: NotFoundResponse}\n)\n\n@app.get(...)\ndef endpoint():\n    ...\n</code></pre>"},{"location":"Usage/Specification/#abp_responses-view_responses","title":"abp_responses &amp; view_responses","text":"<p>You can add <code>responses</code> for each API under the <code>api</code> or <code>api_view</code> wrapper.</p> <pre><code>class Unauthorized(BaseModel):\n    code: int = Field(-1, description=\"Status Code\")\n    message: str = Field(\"Unauthorized!\", description=\"Exception Information\")\n\n\napi = APIBlueprint(\n    \"/book\", \n    __name__, \n    url_prefix=\"/api\",\n    abp_responses={401: Unauthorized}\n)\n\napi_view = APIView(\n    \"/book\",\n    view_responses={401: Unauthorized}\n)\n\n@api.get(...)\ndef endpoint():\n    ...\n</code></pre>"},{"location":"Usage/Specification/#doc_ui","title":"doc_ui","text":"<p>You can pass <code>doc_ui=False</code> to disable the <code>OpenAPI spec</code> when init <code>OpenAPI</code>.</p> <pre><code>app = OpenAPI(__name__, info=info, doc_ui=False)\n</code></pre> <p>You can also use <code>doc_ui</code> in endpoint or when initializing <code>APIBlueprint</code> or <code>APIView</code>.</p> <pre><code>api = APIBlueprint(\n    '/book',\n    __name__,\n    doc_ui=False\n)\n\n# or\n\n@api.get('/book', doc_ui=False)\ndef get_book():\n    ...\n</code></pre>"},{"location":"Usage/Specification/#servers","title":"servers","text":"<p>An array of Server Objects, which provide connectivity information to a target server. If the server's property is not provided, or is an empty array, the default value would be a Server Object with an url value of /.</p> <pre><code>from flask_openapi3 import OpenAPI, Server\n\nservers = [\n    Server(url='http://127.0.0.1:5000'),\n    Server(url='https://127.0.0.1:5000'),\n]\napp = OpenAPI(__name__, info=info, servers=servers)\n</code></pre>"},{"location":"Usage/Specification/#external_docs","title":"external_docs","text":"<p>Allows referencing an external resource for extended documentation.</p> <p>More information to see External Documentation Object.</p> <pre><code>from flask_openapi3 import OpenAPI, ExternalDocumentation\n\nexternal_docs=ExternalDocumentation(\n    url=\"https://www.openapis.org/\",\n    description=\"Something great got better, get excited!\"\n)\napp = OpenAPI(__name__, info=info, external_docs=external_docs)\n</code></pre>"},{"location":"Usage/Specification/#openapi_extensions","title":"openapi_extensions","text":"<p>While the OpenAPI Specification tries to accommodate most use cases,  additional data can be added to extend the specification at certain points. See Specification Extensions.</p> <p>It can also be available in APIBlueprint and APIView, goto Operation.</p> <pre><code>from flask_openapi3 import OpenAPI\n\napp = OpenAPI(__name__, openapi_extensions={\n    \"x-google-endpoints\": [\n        {\n            \"name\": \"my-cool-api.endpoints.my-project-id.cloud.goog\",\n            \"allowCors\": True\n        }\n    ]\n})\n\n@app.get(\"/\")\ndef hello():\n    return \"ok\"\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre>"},{"location":"Usage/Specification/#validation-error","title":"validation error","text":"<p>You can override validation error response use <code>validation_error_status</code>, <code>validation_error_model</code> and <code>validation_error_callback</code>. </p> <ul> <li>validation_error_status: HTTP Status of the response given when a validation error is detected by pydantic.                             Defaults to 422.</li> <li>validation_error_model: Validation error response model for OpenAPI Specification.</li> <li>validation_error_callback: Validation error response callback, the return format corresponds to                               the validation_error_model. Receive <code>ValidationError</code> and return <code>Flask Response</code>.</li> </ul> <pre><code>from flask.wrappers import Response as FlaskResponse\nfrom pydantic import BaseModel, ValidationError\n\nclass ValidationErrorModel(BaseModel):\n    code: str\n    message: str\n\n\ndef validation_error_callback(e: ValidationError) -&gt; FlaskResponse:\n    validation_error_object = ValidationErrorModel(code=\"400\", message=e.json())\n    response = make_response(validation_error_object.json())\n    response.headers[\"Content-Type\"] = \"application/json\"\n    response.status_code = getattr(current_app, \"validation_error_status\", 422)\n    return response\n\n\napp = OpenAPI(\n    __name__,\n    validation_error_status=400,\n    validation_error_model=ValidationErrorModel,\n    validation_error_callback=validation_error_callback\n)\n</code></pre>"},{"location":"Usage/UI_Templates/","title":"UI Templates","text":"<p>Since version v4, a plugin repository has been added, supporting the following UI templates:</p> <p><code>pip install -U flask-openapi3[swagger,redoc,rapidoc,rapipdf,scalar,elements]</code></p> <ul> <li>Swagger</li> <li>Redoc</li> <li>RapiDoc</li> <li>RapiPdf</li> <li>Scalar</li> <li>Elements</li> </ul> <p>Manual Installation:</p> <pre><code>pip install -U flask-openapi3-swagger\npip install -U flask-openapi3-redoc\npip install -U flask-openapi3-rapidoc\npip install -U flask-openapi3-rapipdf\npip install -U flask-openapi3-scalar\npip install -U flask-openapi3-elements\n</code></pre> <p>For more UI templates, please check the plugin repository.</p>"},{"location":"zh/","title":"\u7b80\u4ecb","text":"<p> \u4e3a\u4f60\u7684 Flask \u9879\u76ee\u751f\u6210 REST API \u548c OpenAPI \u6587\u6863\u3002 </p> <p> </p> <p>Flask OpenAPI3 \u662f\u4e00\u4e2a\u57fa\u4e8e Flask \u7684 web API \u6846\u67b6\uff0c\u4f7f\u7528 Pydantic \u9a8c\u8bc1\u6570\u636e\uff0c\u81ea\u52a8\u751f\u6210\u4ea4\u4e92\u6587\u6863\u3002</p> <p>\u4e3b\u8981\u7279\u70b9\u6709\uff1a</p> <ul> <li>\u7f16\u7801\u7b80\u5355\uff1a \u4f7f\u7528\u7b80\u5355\u6613\u4e8e\u5b66\u4e60</li> <li>\u6807\u51c6\u7684\u6587\u6863\u89c4\u8303\uff1a \u57fa\u4e8e\u5f00\u653e API \u89c4\u8303</li> <li>\u4ea4\u4e92\u5f0f OpenAPI \u6587\u6863\uff1a Swagger, Redoc, RapiDoc, RapiPdf, Scalar, Elements</li> <li>\u6570\u636e\u9a8c\u8bc1\uff1a \u57fa\u4e8e Pydantic \u7684\u5feb\u901f\u6570\u636e\u9a8c\u8bc1</li> </ul>"},{"location":"zh/#_1","title":"\u4f9d\u8d56","text":"<p>Python 3.9+</p> <p>flask-openapi3 \u4f9d\u8d56\u4ee5\u4e0b\u5e93\uff1a</p> <ul> <li>Flask\uff1a\u7528\u4e8eWEB\u670d\u52a1</li> <li>Pydantic\uff1a\u7528\u4e8e\u6570\u636e\u9a8c\u8bc1</li> </ul>"},{"location":"zh/#_2","title":"\u5b89\u88c5","text":"<pre><code>pip install -U flask-openapi3\n</code></pre> <p>\u6216\u8005</p> <pre><code>conda install -c conda-forge flask-openapi3\n</code></pre> \u53ef\u9009\u4f9d\u8d56\u9879 <ul> <li>python-email-validator \u652f\u6301\u90ae\u7bb1\u9a8c\u8bc1\uff1b</li> <li>python-dotenv \u5728\u8fd0\u884c <code>flask</code>   \u547d\u4ee4\u65f6\u542f\u7528\u5bf9 dotenv \u73af\u5883\u53d8\u91cf \u7684\u652f\u6301\uff1b</li> <li>pyyaml \u7528\u4e8e\u8f93\u51fa <code>yaml</code>\u683c\u5f0f\u7684 OpenAPI \u6587\u6863\uff1b</li> <li>asgiref \u5141\u8bb8\u5728\u5b9a\u4e49\u89c6\u56fe\u51fd\u6570\u65f6\u4f7f\u7528 <code>async def</code> \u548c <code>await</code>\uff1b</li> <li>flask-openapi3-plugins \u4e3a Flask-OpenAPI3 \u63d0\u4f9b OpenAPI UI.</li> </ul> <p>\u548c flask-openapi3 \u4e00\u8d77\u5b89\u88c5\u8fd9\u4e9b\u4f9d\u8d56:</p> <pre><code>pip install flask-openapi3[yaml]\n# \u6216\u8005\npip install flask-openapi3[async]\n# \u6216\u8005\npip install flask-openapi3[dotenv]\n# \u6216\u8005\npip install flask-openapi3[email]\n# \u6216\u8005\u5b89\u88c5\u5168\u90e8\npip install flask-openapi3[yaml,async,dotenv,email]\n# \u6216\u8005\u624b\u52a8\u5b89\u88c5\npip install pyyaml asgiref python-dotenv email-validator\n# OpenAPI UI \u63d2\u4ef6\npip install -U flask-openapi3[swagger,redoc,rapidoc,rapipdf,scalar,elements]\n</code></pre>"},{"location":"zh/#_3","title":"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b","text":"<p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u66f4\u591a\u793a\u4f8b\u8bf7\u67e5\u770b\u793a\u4f8b\u3002</p> <pre><code>from pydantic import BaseModel\n\nfrom flask_openapi3 import Info, Tag\nfrom flask_openapi3 import OpenAPI\n\ninfo = Info(title=\"book API\", version=\"1.0.0\")\napp = OpenAPI(__name__, info=info)\n\nbook_tag = Tag(name=\"book\", description=\"Some Book\")\n\n\nclass BookQuery(BaseModel):\n    age: int\n    author: str\n\n\n@app.get(\"/book\", summary=\"get books\", tags=[book_tag])\ndef get_book(query: BookQuery):\n    \"\"\"\n    to get all books\n    \"\"\"\n    return {\n        \"code\": 0,\n        \"message\": \"ok\",\n        \"data\": [\n            {\"bid\": 1, \"age\": query.age, \"author\": query.author},\n            {\"bid\": 2, \"age\": query.age, \"author\": query.author}\n        ]\n    }\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre> \u57fa\u4e8e\u7c7b\u7684 API \u89c6\u56fe\u793a\u4f8b <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel, Field\n\nfrom flask_openapi3 import OpenAPI, Tag, Info, APIView\n\n\ninfo = Info(title='book API', version='1.0.0')\napp = OpenAPI(__name__, info=info)\n\napi_view = APIView(url_prefix=\"/api/v1\", view_tags=[Tag(name=\"book\")])\n\n\nclass BookPath(BaseModel):\n    id: int = Field(..., description=\"book ID\")\n\n\nclass BookQuery(BaseModel):\n    age: Optional[int] = Field(None, description='Age')\n\n\nclass BookBody(BaseModel):\n    age: Optional[int] = Field(..., ge=2, le=4, description='Age')\n    author: str = Field(None, min_length=2, max_length=4, description='Author')\n\n\n@api_view.route(\"/book\")\nclass BookListAPIView:\n    a = 1\n\n    @api_view.doc(summary=\"get book list\")\n    def get(self, query: BookQuery):\n        print(self.a)\n        return query.model_dump_json()\n\n    @api_view.doc(summary=\"create book\")\n    def post(self, body: BookBody):\n        \"\"\"description for a created book\"\"\"\n        return body.model_dump_json()\n\n\n@api_view.route(\"/book/&lt;id&gt;\")\nclass BookAPIView:\n    @api_view.doc(summary=\"get book\")\n    def get(self, path: BookPath):\n        print(path)\n        return \"get\"\n\n    @api_view.doc(summary=\"update book\")\n    def put(self, path: BookPath):\n        print(path)\n        return \"put\"\n\n    @api_view.doc(summary=\"delete book\", deprecated=True)\n    def delete(self, path: BookPath):\n        print(path)\n        return \"delete\"\n\n\napp.register_api_view(api_view)\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre>"},{"location":"zh/#api","title":"API \u6587\u6863","text":"<p>\u8fd0\u884c\u7b80\u5355\u793a\u4f8b\uff0c\u7136\u540e\u8bbf\u95ee http://127.0.0.1:5000/openapi\u3002</p> <p>OpenAPI UI\u63d2\u4ef6\u662f\u9700\u8981\u624b\u52a8\u5b89\u88c5\u7684\u53ef\u9009\u4f9d\u8d56\u9879\u3002</p> <p><code>pip install -U flask-openapi3[swagger,redoc,rapidoc,rapipdf,scalar,elements]</code></p> <p>\u66f4\u591a\u53ef\u9009UI\u6a21\u677f</p> <p></p>"},{"location":"zh/Changelog/","title":"\u66f4\u65b0\u65e5\u5fd7","text":""},{"location":"zh/Contributing/","title":"\u8d21\u732e","text":""},{"location":"zh/Example/","title":"\u793a\u4f8b","text":""},{"location":"zh/LICENSE/","title":"\u8bb8\u53ef","text":"<p>MIT License</p> <p>Copyright (c) 2021 llc</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"zh/Quickstart/","title":"\u5feb\u901f\u5f00\u59cb","text":"<p><code>flask_openapi3</code> \u57fa\u4e8e Flask \u548c Pydantic\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u50cf\u4f7f\u7528Flask\u4e00\u6837\u4f7f\u7528 <code>flask_openapi3</code>\u3002</p>"},{"location":"zh/Quickstart/#_1","title":"\u6700\u5c0f\u5e94\u7528","text":"<p>\u50cf Flask \u4e00\u6837\uff0c\u521b\u5efa <code>hello.py</code>:</p> <pre><code>from flask_openapi3 import OpenAPI\n\napp = OpenAPI(__name__)\n\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\n\nif __name__ == '__main__':\n    app.run()\n</code></pre> <p>\u7136\u540e\u8fd0\u884c\uff1a</p> <pre><code>python hello.py\n</code></pre> <p>\u4f60\u5c06\u4f1a\u770b\u5230\u8f93\u51fa\u4fe1\u606f\uff1a</p> <pre><code> * Serving Flask app 'just_flask' (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n</code></pre>"},{"location":"zh/Quickstart/#rest-api","title":"REST API","text":"<p>\u4f60\u53ef\u4ee5\u5728 <code>flask-openapi3</code> \u4e2d\u4f7f\u7528 <code>get</code>\uff0c<code>post</code>\uff0c<code>put</code>\uff0c<code>patch</code>\uff0c<code>delete</code> \u7b49 REST API \u3002</p> <pre><code>from flask_openapi3 import OpenAPI\n\napp = OpenAPI(__name__)\n\n\n@app.get('/book')\ndef get_books():\n    return [\"book1\", \"book2\"]\n\n\n@app.post('/book')\ndef create_book():\n    return {\"message\": \"success\"}\n\n\nif __name__ == '__main__':\n    app.run()\n</code></pre>"},{"location":"zh/Quickstart/#apiblueprint","title":"APIBlueprint","text":"<p>APIBlueprint \u57fa\u4e8e Flask Blueprint\uff0c \u4f60\u5e94\u8be5\u4f7f\u7528 <code>register_api</code> \u6765\u4ee3\u66ff <code>register_blueprint</code>\u3002</p> <pre><code>from flask_openapi3 import OpenAPI\n\napp = OpenAPI(__name__)\n\napi = APIBlueprint('/book', __name__, url_prefix='/api')\n\n\n@api.post('/book')\ndef create_book():\n    return {\"message\": \"success\"}\n\n\n# register api\napp.register_api(api)\n\nif __name__ == '__main__':\n    app.run()\n</code></pre>"},{"location":"zh/Quickstart/#apiblueprint_1","title":"\u5d4c\u5957 APIBlueprint","text":"<p>\u5141\u8bb8\u4e00\u4e2a API Blueprint \u88ab\u53e6\u4e00\u4e2a API Blueprint \u6ce8\u518c\u3002</p> <p>\u66f4\u591a\u4fe1\u606f\u8bf7\u67e5\u770b Flask Nesting Blueprints\u3002</p> <pre><code>from flask_openapi3 import OpenAPI, APIBlueprint\n\napp = OpenAPI(__name__)\n\napi = APIBlueprint('book', __name__, url_prefix='/api/book')\napi_english = APIBlueprint('english', __name__)\napi_chinese = APIBlueprint('chinese', __name__)\n\n\n@api_english.post('/english')\ndef create_english_book():\n    return {\"message\": \"english\"}\n\n\n@api_chinese.post('/chinese')\ndef create_chinese_book():\n    return {\"message\": \"chinese\"}\n\n\n# register nested api\napi.register_api(api_english)\napi.register_api(api_chinese)\n# register api\napp.register_api(api)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"zh/Quickstart/#apiview","title":"APIView","text":"<p>\u57fa\u4e8e\u7c7b\u7684 API \u89c6\u56fe\uff0c \u70b9\u51fb\u8fd9\u91cc \u67e5\u770b\u5b8c\u6574\u793a\u4f8b:</p> <pre><code>@api_view.route(\"/book\")\nclass BookListAPIView:\n    a = 1\n\n    @api_view.doc(summary=\"get book list\")\n    def get(self, query: BookQuery):\n        print(self.a)\n        return query.json()\n\n    @api_view.doc(summary=\"create book\")\n    def post(self, body: BookBody):\n        \"\"\"description for create book\"\"\"\n        return body.json()\n</code></pre>"},{"location":"zh/Quickstart/#api","title":"\u5f02\u6b65 API","text":"<p>\u5728\u5b9a\u4e49\u51fd\u6570\u65f6\u4f7f\u7528 <code>async</code>\u3002 \u66f4\u591a\u4fe1\u606f\u53c2\u8003 Using async and await \u2014 Flask Documentation\u3002</p> <p>Info</p> <p>\u4f60\u9700\u8981\u4f7f\u7528 pip \u624b\u52a8\u5b89\u88c5 <code>asgiref</code>: <pre><code>pip install flask-openapi3[async]\n\n# or\npip install asgiref\n</code></pre></p> <pre><code>@app.post('/open/api')\nasync def post_openapi(body: Query):\n    print(body)\n    return 'POST, OpenAPI!'\n</code></pre>"},{"location":"zh/Usage/Configuration/","title":"\u914d\u7f6e","text":"<p>Flask supports many configurations, and there are also some configurations in this library that can be used.</p>"},{"location":"zh/Usage/Model_Config/","title":"\u6a21\u578b\u914d\u7f6e","text":"<p>The BaseModel in Pydantic  supports some custom configurations(Model Config),  so we can use the <code>openapi_extra</code> to extend OpenAPI Specification.</p>"},{"location":"zh/Usage/Request/","title":"\u8bf7\u6c42","text":""},{"location":"zh/Usage/Response/","title":"\u54cd\u5e94","text":""},{"location":"zh/Usage/Route_Operation/","title":"\u8def\u7531\u64cd\u4f5c","text":""},{"location":"zh/Usage/Specification/","title":"\u89c4\u8303","text":""},{"location":"zh/Usage/UI_Templates/","title":"\u81ea\u5b9a\u4e49\u6a21\u677f","text":"<p>Since version v4, a plugin repository has been added, supporting the following UI templates:</p> <p><code>pip install -U flask-openapi3[swagger,redoc,rapidoc,rapipdf,scalar,elements]</code></p> <ul> <li>Swagger</li> <li>Redoc</li> <li>RapiDoc</li> <li>RapiPdf</li> <li>Scalar</li> <li>Elements</li> </ul> <p>Manual Installation:</p> <pre><code>pip install -U flask-openapi3-swagger\npip install -U flask-openapi3-redoc\npip install -U flask-openapi3-rapidoc\npip install -U flask-openapi3-rapipdf\npip install -U flask-openapi3-scalar\npip install -U flask-openapi3-elements\n</code></pre> <p>For more UI templates, please check the plugin repository.</p>"}]}